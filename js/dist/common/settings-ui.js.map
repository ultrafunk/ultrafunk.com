{
  "version": 3,
  "sources": ["js/src/common/debuglogger.js", "js/src/common/settings.js", "js/src/common/utils.js", "js/src/common/utils.js", "js/src/common/utils.js", "js/src/common/utils.js", "js/src/common/storage.js", "js/src/common/storage.js", "js/src/common/storage.js", "js/src/common/storage.js", "js/src/common/settings-ui.js"],
  "sourcesContent": ["//\r\n// Debug logging helper classes\r\n//\r\n// https://ultrafunk.com\r\n//\r\n\r\n\r\nexport { getInstance, logErrorOnServer };\r\n\r\n\r\n/*************************************************************************************************/\r\n\r\n\r\nconst DEBUG = false;\r\n\r\n\r\n// ************************************************************************************************\r\n// DebugLog parent and child classes\r\n// ************************************************************************************************\r\n\r\nclass DebugLog\r\n{\r\n  constructor(caller = 'unknown')\r\n  {\r\n    this.caller = padString(caller.toUpperCase(), 15, '.');\r\n  }\r\n  \r\n  isDebug()   { return DEBUG;                           }\r\n  warn(data)  { console.warn(`${this.caller}:`,  data); }\r\n  error(data) { console.error(`${this.caller}:`, data); }\r\n}\r\n\r\nclass DevBuild extends DebugLog\r\n{\r\n  constructor(caller) { super(caller); }\r\n\r\n  log(data)\r\n  {\r\n    console.log(`${this.caller}:`, data);\r\n  }\r\n\r\n  logEventLog(eventLog, eventSource, eventType)\r\n  {\r\n    const entries = [];\r\n    \r\n    for (let i = 0; i < eventLog.length; i++)\r\n    {\r\n      const data = {\r\n        eventSource: this.getObjectKeyForValue(eventSource, eventLog[i].eventSource),\r\n        eventType:   this.getObjectKeyForValue(eventType, eventLog[i].eventType),\r\n        uId:         eventLog[i].uId,\r\n        timeStamp:   eventLog[i].timeStamp,\r\n      };\r\n\r\n      entries.push(data);\r\n    }\r\n    \r\n    this.log(entries);\r\n  }\r\n\r\n  getObjectKeyForValue(object, value)\r\n  {\r\n    return Object.keys(object).find(key => object[key] === value);\r\n  }\r\n}\r\n\r\nclass ProdBuild extends DebugLog\r\n{\r\n  constructor(caller) { super(caller); }\r\n\r\n  log()                  {}\r\n  logEventLog()          {}\r\n  getObjectKeyForValue() {}\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// DebugLog class support functions\r\n// ************************************************************************************************\r\n\r\nfunction getInstance(caller)\r\n{\r\n  return ((DEBUG === true) ? new DevBuild(caller) : new ProdBuild(caller));\r\n}\r\n\r\nfunction padString(string, maxLength, padChar)\r\n{\r\n  return ((string.length > maxLength) ? string.slice(0, maxLength) : string.padEnd(maxLength, padChar));\r\n}\r\n\r\nfunction logErrorOnServer(errorCategory, errorData)\r\n{\r\n  const eventAction = errorData.mediaUrl + ' | ' + errorData.mediaTitle;\r\n  \r\n  console.log(`DEBUGLOGGER....: logErrorOnServer(): ${errorCategory} - ${eventAction}`);\r\n  \r\n  gtag('event', eventAction, // eslint-disable-line no-undef\r\n  {\r\n    event_category: errorCategory,\r\n    event_label:    'Ultrafunk Client Error',\r\n  });\r\n}\r\n", "//\r\n// Schemas and objects for playback and site settings\r\n//\r\n// https://ultrafunk.com\r\n//\r\n\r\n\r\nexport {\r\n  playbackSettingsSchema,\r\n  playbackSettings,\r\n  siteSettingsSchema,\r\n  siteSettings,\r\n};\r\n\r\n\r\n// ************************************************************************************************\r\n// Playback\r\n// ************************************************************************************************\r\n\r\nconst playbackSettingsSchema = {\r\n  keyboardShortcuts:      { description: 'Keyboard Shortcuts',                 values: [true, false],           default: true,  valueStrings: ['ON', 'OFF'] },\r\n  masterVolume:           { description: 'Master Volume',                      values: [0, 25, 50, 75, 100],    default: 100,   valueStrings: ['0%', '25%', '50%', '75%', '100%'] },\r\n  masterMute:             { description: 'Master Mute',                        values: [true, false],           default: false, valueStrings: ['ON', 'OFF'] },\r\n  autoPlay:               { description: 'Autoplay next track',                values: [true, false],           default: true,  valueStrings: ['ON', 'OFF'] },\r\n  autoCrossfade:          { description: 'Auto Crossfade to next track',       values: [true, false],           default: false, valueStrings: ['ON', 'OFF'] },\r\n  autoCrossfadeLength:    { description: 'Auto Crossfade Length',              values: [5, 10, 15, 20, 25, 30], default: 20,    valueStrings: ['5 sec', '10 sec', '15 sec', '20 sec', '25 sec', '30 sec'] },\r\n  autoCrossfadeCurve:     { description: 'Auto Crossfade Curve',               values: [0, 1],                  default: 1,     valueStrings: ['EQUAL POWER', 'LINEAR'] },\r\n  autoScroll:             { description: 'Autoscroll to next track',           values: [true, false],           default: true,  valueStrings: ['ON', 'OFF'] },\r\n  smoothScrolling:        { description: 'Smooth Scrolling to next track',     values: [true, false],           default: true,  valueStrings: ['ON', 'OFF'] },\r\n  autoExitFullscreen:     { description: 'Exit Fullscreen on next track',      values: [true, false],           default: true,  valueStrings: ['ON', 'OFF'] },\r\n  animateNowPlayingIcon:  { description: 'Animate Playing Track Icon',         values: [true, false],           default: true,  valueStrings: ['ON', 'OFF'] },\r\n  autoResumePlayback:     { description: 'Auto Resume Playback on focus',      values: [true, false],           default: false, valueStrings: ['ON', 'OFF'] },\r\n  trackCrossfade:         { description: 'Track to Track Crossfade',           values: [true, false],           default: true,  valueStrings: ['ON', 'OFF'] },\r\n  trackCrossfadeLength:   { description: 'Track to Track Crossfade Length',    values: [5, 10, 15, 20, 25, 30], default: 10,    valueStrings: ['5 sec', '10 sec', '15 sec', '20 sec', '25 sec', '30 sec'] },\r\n  trackCrossfadeCurve:    { description: 'Track to Track Crossfade Curve',     values: [0, 1],                  default: 0,     valueStrings: ['EQUAL POWER', 'LINEAR'] },\r\n  timeRemainingWarning:   { description: 'Time Remaining Warning',             values: [true, false],           default: true,  valueStrings: ['ON', 'OFF'] },\r\n  timeRemainingSeconds:   { description: 'Time Remaining Warning Seconds',     values: [15, 30, 45, 60],        default: 60,    valueStrings: ['15 sec', '30 sec', '45 sec', '60 sec'] },\r\n  autoExitFsOnWarning:    { description: 'Exit Fullscreen on Time Warning',    values: [true, false],           default: true,  valueStrings: ['ON', 'OFF'] },\r\n  keepMobileScreenOn:     { description: 'Keep Mobile Screen On when playing', values: [true, false],           default: false, valueStrings: ['ON', 'OFF'] },\r\n  trackTimesOnMobile:     { description: 'Show Track Times on mobile',         values: [true, false],           default: false, valueStrings: ['ON', 'OFF'] },\r\n  trackThumbnailOnMobile: { description: 'Show Track Thumbnail on mobile',     values: [true, false],           default: true,  valueStrings: ['ON', 'OFF'] },\r\n};\r\n\r\nconst playbackSettings = {\r\n  // Incremental version to check for new properties\r\n  version:           21,\r\n  storageChangeSync: false,\r\n  // User (public) settings\r\n  user: {\r\n    keyboardShortcuts:      playbackSettingsSchema.keyboardShortcuts.default,\r\n    masterVolume:           playbackSettingsSchema.masterVolume.default,\r\n    masterMute:             playbackSettingsSchema.masterMute.default,\r\n    autoPlay:               playbackSettingsSchema.autoPlay.default,\r\n    autoCrossfade:          playbackSettingsSchema.autoCrossfade.default,\r\n    autoCrossfadeLength:    playbackSettingsSchema.autoCrossfadeLength.default,\r\n    autoCrossfadeCurve:     playbackSettingsSchema.autoCrossfadeCurve.default,\r\n    autoScroll:             playbackSettingsSchema.autoScroll.default,\r\n    smoothScrolling:        playbackSettingsSchema.smoothScrolling.default,\r\n    autoExitFullscreen:     playbackSettingsSchema.autoExitFullscreen.default,\r\n    animateNowPlayingIcon:  playbackSettingsSchema.animateNowPlayingIcon.default,\r\n    autoResumePlayback:     playbackSettingsSchema.autoResumePlayback.default,\r\n    trackCrossfade:         playbackSettingsSchema.trackCrossfade.default,\r\n    trackCrossfadeLength:   playbackSettingsSchema.trackCrossfadeLength.default,     \r\n    trackCrossfadeCurve:    playbackSettingsSchema.trackCrossfadeCurve.default,\r\n    timeRemainingWarning:   playbackSettingsSchema.timeRemainingWarning.default,\r\n    timeRemainingSeconds:   playbackSettingsSchema.timeRemainingSeconds.default,\r\n    autoExitFsOnWarning:    playbackSettingsSchema.autoExitFsOnWarning.default,\r\n    keepMobileScreenOn:     playbackSettingsSchema.keepMobileScreenOn.default,\r\n    trackTimesOnMobile:     playbackSettingsSchema.trackTimesOnMobile.default,\r\n    trackThumbnailOnMobile: playbackSettingsSchema.trackThumbnailOnMobile.default,\r\n    blurFocusBgChange:      false,\r\n  },\r\n  // Priv (private / internal) settings\r\n  priv: {\r\n    continueAutoPlay:   false,\r\n    showLeftArrowHint:  true,\r\n    showRightArrowHint: true,\r\n    showDetailsHint:    true,\r\n    showTrackImageHint: true,\r\n  },\r\n};\r\n\r\n\r\n// ************************************************************************************************\r\n// Site\r\n// ************************************************************************************************\r\n\r\nconst siteSettingsSchema = {\r\n  theme:             { description: 'Theme',                                    values: ['light', 'dark', 'auto'],             default: 'auto',     valueStrings: ['LIGHT', 'DARK', 'AUTO / SYSTEM']         },\r\n  trackLayout:       { description: 'Track Layout',                             values: ['list', '2-column', '3-column'],      default: '3-column', valueStrings: ['LIST', '2 COLUMN', '3 / 4 COLUMN']       },\r\n  tracksPerPage:     { description: 'Tracks Per Page for Search &amp; Shuffle', values: [...Array(22).keys()].map(i => i + 3), default: 12,         valueStrings: [...Array(22).keys()].map(i => `${i + 3}`) },\r\n  keyboardShortcuts: { description: 'Keyboard Shortcuts',                       values: [true, false],                         default: true,       valueStrings: ['ON', 'OFF']                              },\r\n};\r\n\r\nconst siteSettings = {\r\n  // Incremental version to check for new properties\r\n  version:           6,\r\n  storageChangeSync: false,\r\n  // User (public) settings\r\n  user: {\r\n    theme:             siteSettingsSchema.theme.default,\r\n    trackLayout:       siteSettingsSchema.trackLayout.default,\r\n    tracksPerPage:     siteSettingsSchema.tracksPerPage.default,\r\n    keyboardShortcuts: siteSettingsSchema.keyboardShortcuts.default,\r\n  },\r\n  // Priv (private / internal) settings\r\n  priv: {\r\n    banners: {\r\n      showFrontpageIntro: true,\r\n      showPremiumIntro:   true,\r\n      showPromoIntro:     true,\r\n    },\r\n  },\r\n};\r\n\r\n", "//\r\n// Common utility functions\r\n//\r\n// https://ultrafunk.com\r\n//\r\n\r\n\r\nimport * as debugLogger from '../common/debuglogger.js';\r\n\r\n\r\nexport {\r\n//Constants\r\n  MATCH,\r\n//Functions\r\n  addEventListeners,\r\n  getCssPropString,\r\n  getCssPropValue,\r\n  matchesMedia,\r\n  replaceClass,\r\n  modal,\r\n  snackbar,\r\n};\r\n\r\n\r\n/*************************************************************************************************/\r\n\r\n\r\nconst debug = debugLogger.getInstance('utils');\r\n\r\nconst MATCH = {\r\n  SITE_MIN_WIDTH_WIDE:   1,\r\n  SITE_MAX_WIDTH:        2,\r\n  SITE_MAX_WIDTH_MOBILE: 3,\r\n};\r\n\r\nconst siteMinWidthWide   = window.matchMedia(`(min-width: ${getCssPropString('--site-min-width-wide')})`);\r\nconst siteMaxWidth       = window.matchMedia(`(max-width: ${getCssPropString('--site-max-width')})`);\r\nconst siteMaxWidthMobile = window.matchMedia(`(max-width: ${getCssPropString('--site-max-width-mobile')})`);\r\n\r\n\r\n// ************************************************************************************************\r\n// Misc. utility functions\r\n// ************************************************************************************************\r\n\r\n// Plain JS function equivalent to jQuery(selectors).eventX();\r\n// Adds event listeners of 'type' to all matching selectors \r\nfunction addEventListeners(selectors, type, listener, data = null)\r\n{\r\n  const elementList = document.querySelectorAll(selectors);\r\n  elementList.forEach(element => { element.addEventListener(type, (event) => listener(event, data)); });\r\n}\r\n\r\nfunction getCssPropString(prop)\r\n{\r\n  let string = getComputedStyle(document.documentElement).getPropertyValue(prop);\r\n\r\n  if (string.length !== 0)\r\n    string = string.replace(/'|\"/g, '').trim();\r\n  else\r\n    debug.error(`getCssPropString(${prop}): Returned CSS property string is empty`);\r\n\r\n  return string;\r\n}\r\n\r\nfunction getCssPropValue(prop)\r\n{\r\n  const string = getCssPropString(prop);\r\n  let value    = NaN;\r\n\r\n  if (string.length !== 0)\r\n    value = parseInt(string);\r\n\r\n  if (isNaN(value))\r\n    debug.error(`getCssPropValue(${prop}): Returned CSS property value is NaN`);\r\n\r\n  return value;\r\n}\r\n\r\n// Match against live CSS media queries defined in style.css\r\nfunction matchesMedia(matchMedia)\r\n{\r\n  switch (matchMedia)\r\n  {\r\n    case MATCH.SITE_MIN_WIDTH_WIDE:\r\n      return siteMinWidthWide.matches;\r\n      \r\n    case MATCH.SITE_MAX_WIDTH:\r\n      return siteMaxWidth.matches;\r\n\r\n    case MATCH.SITE_MAX_WIDTH_MOBILE:\r\n      return siteMaxWidthMobile.matches;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction replaceClass(element, removeClass, addClass)\r\n{\r\n  element.classList.remove(removeClass);\r\n  element.classList.add(addClass);\r\n}\r\n\r\nfunction disablePageScrolling(disable)\r\n{\r\n  const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\r\n  document.body.style.overflow     = disable ? 'hidden' : '';\r\n  document.body.style.paddingRight = disable ? `${scrollbarWidth}px` : '';\r\n  document.getElementById('site-header').style.paddingRight = disable ? `${scrollbarWidth}px` : '';\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Modal dialog UI module\r\n// ************************************************************************************************\r\n\r\nconst modal = (() =>\r\n{\r\n  const config = { id: 'modal' };\r\n\r\n  const template = `\r\n    <div id=\"${config.id}-dialog\" tabindex=\"-1\">\r\n      <div class=\"${config.id}-container\">\r\n        <div class=\"${config.id}-header\">\r\n          <div class=\"${config.id}-title\"></div>\r\n          <div class=\"${config.id}-close-button\"><span class=\"material-icons\" title=\"Dismiss\">close</span></div>\r\n        </div>\r\n        <div class=\"${config.id}-body\"></div>\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n  const elements = { overlay: null, container: null, body: null };\r\n  let singleChoiceClickCallback = null;\r\n  \r\n  return {\r\n    show,\r\n  };\r\n\r\n  function show(title, singleChoiceList, singleChoiceClickCallbackFunc)\r\n  {\r\n    debug.log(`modal.show(): ${title}`);\r\n\r\n    init();\r\n    \r\n    singleChoiceClickCallback = singleChoiceClickCallbackFunc;\r\n    setSingleChoiceList(singleChoiceList);\r\n\r\n    elements.container.querySelector(`.${config.id}-title`).innerHTML = title;\r\n    elements.overlay.classList.add('show');\r\n    elements.overlay.addEventListener('keydown', keyDown);\r\n    elements.overlay.focus();\r\n    disablePageScrolling(true);\r\n  }\r\n\r\n  function init()\r\n  {\r\n    if (elements.container === null)\r\n    {\r\n      document.body.insertAdjacentHTML('beforeend', template);\r\n      \r\n      elements.overlay   = document.getElementById(`${config.id}-dialog`);\r\n      elements.container = elements.overlay.querySelector(`.${config.id}-container`);\r\n      elements.body      = elements.overlay.querySelector(`.${config.id}-body`);\r\n\r\n      elements.overlay.addEventListener('click', (event) =>\r\n      {\r\n        if (event.target === elements.overlay)\r\n          close();\r\n      });\r\n\r\n      elements.overlay.addEventListener('animationend', () =>\r\n      {\r\n        if (elements.overlay.classList.contains('hide'))\r\n        {\r\n          elements.overlay.className = '';\r\n          disablePageScrolling(false);\r\n        }\r\n      });\r\n\r\n      elements.overlay.querySelector(`.${config.id}-close-button`).addEventListener('click', close);\r\n    }\r\n  }\r\n\r\n  function setSingleChoiceList(singleChoiceList)\r\n  {\r\n    let listHtml = '';\r\n\r\n    singleChoiceList.forEach(entry => listHtml += `<div id=\"${entry.id}\" class=\"${config.id}-single-choice\">${entry.description}</div>`);\r\n    elements.body.innerHTML = listHtml;\r\n\r\n    singleChoiceList.forEach(entry => elements.body.querySelector(`#${entry.id}`).addEventListener('click', singleChoiceListClick));\r\n  }\r\n\r\n  function singleChoiceListClick()\r\n  {\r\n    close();\r\n    setTimeout(() => singleChoiceClickCallback(this.id), 150);\r\n  }\r\n\r\n  function keyDown(event)\r\n  {\r\n    event.stopPropagation();\r\n\r\n    if (event.key === 'Escape')\r\n      close();\r\n  }\r\n\r\n  function close()\r\n  {\r\n    elements.overlay.removeEventListener('keydown', keyDown);\r\n    elements.overlay.classList.replace('show', 'hide');\r\n  }\r\n})();\r\n\r\n\r\n// ************************************************************************************************\r\n// Snackbar UI module\r\n// ************************************************************************************************\r\n\r\nconst snackbar = (() =>\r\n{\r\n  const config = { id: 'snackbar' };\r\n\r\n  const template = `\r\n    <div id=\"${config.id}\">\r\n      <div class=\"${config.id}-container\">\r\n        <div class=\"${config.id}-message\"></div>\r\n        <div class=\"${config.id}-action-button\"></div>\r\n        <div class=\"${config.id}-close-button\"><span class=\"material-icons\" title=\"Dismiss\">close</span></div>\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n  const elements = { snackbar: null, actionButton: null, closeButton: null };\r\n  let actionClickCallback = null;\r\n  let afterCloseCallback  = null;\r\n  let visibleTimeoutId    = -1;\r\n  let fadeTimeoutId       = -1;\r\n  \r\n  return {\r\n    show,\r\n  };\r\n  \r\n  function show(message, timeout = 5, actionText = null, actionClickCallbackFunc = null, afterCloseCallbackFunc = null)\r\n  {\r\n    debug.log(`snackbar.show(): ${message} (${timeout} sec)`);\r\n  \r\n    init();\r\n    reset();\r\n\r\n    elements.snackbar.querySelector(`.${config.id}-message`).innerHTML = message;\r\n    elements.snackbar.classList.add('show');\r\n    elements.actionButton.style.display = 'none';\r\n    afterCloseCallback = afterCloseCallbackFunc;\r\n\r\n    if ((actionText !== null) && (actionClickCallbackFunc !== null))\r\n    {\r\n      actionClickCallback = actionClickCallbackFunc;\r\n      elements.actionButton.style.display = 'block';\r\n      elements.actionButton.textContent   = actionText;\r\n      elements.actionButton.addEventListener('click', actionButtonClick);\r\n    }\r\n    else\r\n    {\r\n      // Fix edge case when actionButton is hidden...\r\n      matchesMedia(MATCH.SITE_MAX_WIDTH_MOBILE) ? elements.closeButton.style.paddingLeft = '10px' : elements.closeButton.style.paddingLeft = '20px';\r\n    }\r\n    \r\n    if (timeout !== 0)\r\n    {\r\n      visibleTimeoutId = setTimeout(() =>\r\n      {\r\n        elements.snackbar.classList.add('hide');\r\n        \r\n        fadeTimeoutId = setTimeout(() =>\r\n        {\r\n          elements.snackbar.className = '';\r\n\r\n          if (afterCloseCallback !== null)\r\n          {\r\n            afterCloseCallback();\r\n          }\r\n        }, 450);\r\n      },\r\n      (timeout * 1000));\r\n    }\r\n  }\r\n\r\n  function actionButtonClick()\r\n  {\r\n    actionClickCallback();\r\n    reset(true);\r\n  }\r\n\r\n  function init()\r\n  {\r\n    if (elements.snackbar === null)\r\n    {\r\n      document.body.insertAdjacentHTML('beforeend', template);\r\n\r\n      elements.snackbar     = document.getElementById(config.id);\r\n      elements.actionButton = elements.snackbar.querySelector(`.${config.id}-action-button`);\r\n      elements.closeButton  = elements.snackbar.querySelector(`.${config.id}-close-button`);\r\n      \r\n      elements.closeButton.addEventListener('click', () =>\r\n      {\r\n        if (afterCloseCallback !== null)\r\n          afterCloseCallback();\r\n          \r\n        reset(true);\r\n      });\r\n    }\r\n  }\r\n  \r\n  function reset(hideSnackbar = false)\r\n  {\r\n    if (visibleTimeoutId !== -1)\r\n    {\r\n      clearTimeout(visibleTimeoutId);\r\n      visibleTimeoutId = -1;\r\n    }\r\n  \r\n    if (fadeTimeoutId !== -1)\r\n    {\r\n      clearTimeout(fadeTimeoutId);\r\n      fadeTimeoutId = -1;\r\n    }\r\n\r\n    elements.actionButton.removeEventListener('click', actionButtonClick);\r\n  \r\n    if (hideSnackbar)\r\n      elements.snackbar.classList.remove('show');\r\n  }\r\n})();\r\n\r\n", "//\r\n// Common utility functions\r\n//\r\n// https://ultrafunk.com\r\n//\r\n\r\n\r\nimport * as debugLogger from '../common/debuglogger.js';\r\n\r\n\r\nexport {\r\n//Constants\r\n  MATCH,\r\n//Functions\r\n  addEventListeners,\r\n  getCssPropString,\r\n  getCssPropValue,\r\n  matchesMedia,\r\n  replaceClass,\r\n  modal,\r\n  snackbar,\r\n};\r\n\r\n\r\n/*************************************************************************************************/\r\n\r\n\r\nconst debug = debugLogger.getInstance('utils');\r\n\r\nconst MATCH = {\r\n  SITE_MIN_WIDTH_WIDE:   1,\r\n  SITE_MAX_WIDTH:        2,\r\n  SITE_MAX_WIDTH_MOBILE: 3,\r\n};\r\n\r\nconst siteMinWidthWide   = window.matchMedia(`(min-width: ${getCssPropString('--site-min-width-wide')})`);\r\nconst siteMaxWidth       = window.matchMedia(`(max-width: ${getCssPropString('--site-max-width')})`);\r\nconst siteMaxWidthMobile = window.matchMedia(`(max-width: ${getCssPropString('--site-max-width-mobile')})`);\r\n\r\n\r\n// ************************************************************************************************\r\n// Misc. utility functions\r\n// ************************************************************************************************\r\n\r\n// Plain JS function equivalent to jQuery(selectors).eventX();\r\n// Adds event listeners of 'type' to all matching selectors \r\nfunction addEventListeners(selectors, type, listener, data = null)\r\n{\r\n  const elementList = document.querySelectorAll(selectors);\r\n  elementList.forEach(element => { element.addEventListener(type, (event) => listener(event, data)); });\r\n}\r\n\r\nfunction getCssPropString(prop)\r\n{\r\n  let string = getComputedStyle(document.documentElement).getPropertyValue(prop);\r\n\r\n  if (string.length !== 0)\r\n    string = string.replace(/'|\"/g, '').trim();\r\n  else\r\n    debug.error(`getCssPropString(${prop}): Returned CSS property string is empty`);\r\n\r\n  return string;\r\n}\r\n\r\nfunction getCssPropValue(prop)\r\n{\r\n  const string = getCssPropString(prop);\r\n  let value    = NaN;\r\n\r\n  if (string.length !== 0)\r\n    value = parseInt(string);\r\n\r\n  if (isNaN(value))\r\n    debug.error(`getCssPropValue(${prop}): Returned CSS property value is NaN`);\r\n\r\n  return value;\r\n}\r\n\r\n// Match against live CSS media queries defined in style.css\r\nfunction matchesMedia(matchMedia)\r\n{\r\n  switch (matchMedia)\r\n  {\r\n    case MATCH.SITE_MIN_WIDTH_WIDE:\r\n      return siteMinWidthWide.matches;\r\n      \r\n    case MATCH.SITE_MAX_WIDTH:\r\n      return siteMaxWidth.matches;\r\n\r\n    case MATCH.SITE_MAX_WIDTH_MOBILE:\r\n      return siteMaxWidthMobile.matches;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction replaceClass(element, removeClass, addClass)\r\n{\r\n  element.classList.remove(removeClass);\r\n  element.classList.add(addClass);\r\n}\r\n\r\nfunction disablePageScrolling(disable)\r\n{\r\n  const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\r\n  document.body.style.overflow     = disable ? 'hidden' : '';\r\n  document.body.style.paddingRight = disable ? `${scrollbarWidth}px` : '';\r\n  document.getElementById('site-header').style.paddingRight = disable ? `${scrollbarWidth}px` : '';\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Modal dialog UI module\r\n// ************************************************************************************************\r\n\r\nconst modal = (() =>\r\n{\r\n  const config = { id: 'modal' };\r\n\r\n  const template = `\r\n    <div id=\"${config.id}-dialog\" tabindex=\"-1\">\r\n      <div class=\"${config.id}-container\">\r\n        <div class=\"${config.id}-header\">\r\n          <div class=\"${config.id}-title\"></div>\r\n          <div class=\"${config.id}-close-button\"><span class=\"material-icons\" title=\"Dismiss\">close</span></div>\r\n        </div>\r\n        <div class=\"${config.id}-body\"></div>\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n  const elements = { overlay: null, container: null, body: null };\r\n  let singleChoiceClickCallback = null;\r\n  \r\n  return {\r\n    show,\r\n  };\r\n\r\n  function show(title, singleChoiceList, singleChoiceClickCallbackFunc)\r\n  {\r\n    debug.log(`modal.show(): ${title}`);\r\n\r\n    init();\r\n    \r\n    singleChoiceClickCallback = singleChoiceClickCallbackFunc;\r\n    setSingleChoiceList(singleChoiceList);\r\n\r\n    elements.container.querySelector(`.${config.id}-title`).innerHTML = title;\r\n    elements.overlay.classList.add('show');\r\n    elements.overlay.addEventListener('keydown', keyDown);\r\n    elements.overlay.focus();\r\n    disablePageScrolling(true);\r\n  }\r\n\r\n  function init()\r\n  {\r\n    if (elements.container === null)\r\n    {\r\n      document.body.insertAdjacentHTML('beforeend', template);\r\n      \r\n      elements.overlay   = document.getElementById(`${config.id}-dialog`);\r\n      elements.container = elements.overlay.querySelector(`.${config.id}-container`);\r\n      elements.body      = elements.overlay.querySelector(`.${config.id}-body`);\r\n\r\n      elements.overlay.addEventListener('click', (event) =>\r\n      {\r\n        if (event.target === elements.overlay)\r\n          close();\r\n      });\r\n\r\n      elements.overlay.addEventListener('animationend', () =>\r\n      {\r\n        if (elements.overlay.classList.contains('hide'))\r\n        {\r\n          elements.overlay.className = '';\r\n          disablePageScrolling(false);\r\n        }\r\n      });\r\n\r\n      elements.overlay.querySelector(`.${config.id}-close-button`).addEventListener('click', close);\r\n    }\r\n  }\r\n\r\n  function setSingleChoiceList(singleChoiceList)\r\n  {\r\n    let listHtml = '';\r\n\r\n    singleChoiceList.forEach(entry => listHtml += `<div id=\"${entry.id}\" class=\"${config.id}-single-choice\">${entry.description}</div>`);\r\n    elements.body.innerHTML = listHtml;\r\n\r\n    singleChoiceList.forEach(entry => elements.body.querySelector(`#${entry.id}`).addEventListener('click', singleChoiceListClick));\r\n  }\r\n\r\n  function singleChoiceListClick()\r\n  {\r\n    close();\r\n    setTimeout(() => singleChoiceClickCallback(this.id), 150);\r\n  }\r\n\r\n  function keyDown(event)\r\n  {\r\n    event.stopPropagation();\r\n\r\n    if (event.key === 'Escape')\r\n      close();\r\n  }\r\n\r\n  function close()\r\n  {\r\n    elements.overlay.removeEventListener('keydown', keyDown);\r\n    elements.overlay.classList.replace('show', 'hide');\r\n  }\r\n})();\r\n\r\n\r\n// ************************************************************************************************\r\n// Snackbar UI module\r\n// ************************************************************************************************\r\n\r\nconst snackbar = (() =>\r\n{\r\n  const config = { id: 'snackbar' };\r\n\r\n  const template = `\r\n    <div id=\"${config.id}\">\r\n      <div class=\"${config.id}-container\">\r\n        <div class=\"${config.id}-message\"></div>\r\n        <div class=\"${config.id}-action-button\"></div>\r\n        <div class=\"${config.id}-close-button\"><span class=\"material-icons\" title=\"Dismiss\">close</span></div>\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n  const elements = { snackbar: null, actionButton: null, closeButton: null };\r\n  let actionClickCallback = null;\r\n  let afterCloseCallback  = null;\r\n  let visibleTimeoutId    = -1;\r\n  let fadeTimeoutId       = -1;\r\n  \r\n  return {\r\n    show,\r\n  };\r\n  \r\n  function show(message, timeout = 5, actionText = null, actionClickCallbackFunc = null, afterCloseCallbackFunc = null)\r\n  {\r\n    debug.log(`snackbar.show(): ${message} (${timeout} sec)`);\r\n  \r\n    init();\r\n    reset();\r\n\r\n    elements.snackbar.querySelector(`.${config.id}-message`).innerHTML = message;\r\n    elements.snackbar.classList.add('show');\r\n    elements.actionButton.style.display = 'none';\r\n    afterCloseCallback = afterCloseCallbackFunc;\r\n\r\n    if ((actionText !== null) && (actionClickCallbackFunc !== null))\r\n    {\r\n      actionClickCallback = actionClickCallbackFunc;\r\n      elements.actionButton.style.display = 'block';\r\n      elements.actionButton.textContent   = actionText;\r\n      elements.actionButton.addEventListener('click', actionButtonClick);\r\n    }\r\n    else\r\n    {\r\n      // Fix edge case when actionButton is hidden...\r\n      matchesMedia(MATCH.SITE_MAX_WIDTH_MOBILE) ? elements.closeButton.style.paddingLeft = '10px' : elements.closeButton.style.paddingLeft = '20px';\r\n    }\r\n    \r\n    if (timeout !== 0)\r\n    {\r\n      visibleTimeoutId = setTimeout(() =>\r\n      {\r\n        elements.snackbar.classList.add('hide');\r\n        \r\n        fadeTimeoutId = setTimeout(() =>\r\n        {\r\n          elements.snackbar.className = '';\r\n\r\n          if (afterCloseCallback !== null)\r\n          {\r\n            afterCloseCallback();\r\n          }\r\n        }, 450);\r\n      },\r\n      (timeout * 1000));\r\n    }\r\n  }\r\n\r\n  function actionButtonClick()\r\n  {\r\n    actionClickCallback();\r\n    reset(true);\r\n  }\r\n\r\n  function init()\r\n  {\r\n    if (elements.snackbar === null)\r\n    {\r\n      document.body.insertAdjacentHTML('beforeend', template);\r\n\r\n      elements.snackbar     = document.getElementById(config.id);\r\n      elements.actionButton = elements.snackbar.querySelector(`.${config.id}-action-button`);\r\n      elements.closeButton  = elements.snackbar.querySelector(`.${config.id}-close-button`);\r\n      \r\n      elements.closeButton.addEventListener('click', () =>\r\n      {\r\n        if (afterCloseCallback !== null)\r\n          afterCloseCallback();\r\n          \r\n        reset(true);\r\n      });\r\n    }\r\n  }\r\n  \r\n  function reset(hideSnackbar = false)\r\n  {\r\n    if (visibleTimeoutId !== -1)\r\n    {\r\n      clearTimeout(visibleTimeoutId);\r\n      visibleTimeoutId = -1;\r\n    }\r\n  \r\n    if (fadeTimeoutId !== -1)\r\n    {\r\n      clearTimeout(fadeTimeoutId);\r\n      fadeTimeoutId = -1;\r\n    }\r\n\r\n    elements.actionButton.removeEventListener('click', actionButtonClick);\r\n  \r\n    if (hideSnackbar)\r\n      elements.snackbar.classList.remove('show');\r\n  }\r\n})();\r\n\r\n", "//\r\n// Common utility functions\r\n//\r\n// https://ultrafunk.com\r\n//\r\n\r\n\r\nimport * as debugLogger from '../common/debuglogger.js';\r\n\r\n\r\nexport {\r\n//Constants\r\n  MATCH,\r\n//Functions\r\n  addEventListeners,\r\n  getCssPropString,\r\n  getCssPropValue,\r\n  matchesMedia,\r\n  replaceClass,\r\n  modal,\r\n  snackbar,\r\n};\r\n\r\n\r\n/*************************************************************************************************/\r\n\r\n\r\nconst debug = debugLogger.getInstance('utils');\r\n\r\nconst MATCH = {\r\n  SITE_MIN_WIDTH_WIDE:   1,\r\n  SITE_MAX_WIDTH:        2,\r\n  SITE_MAX_WIDTH_MOBILE: 3,\r\n};\r\n\r\nconst siteMinWidthWide   = window.matchMedia(`(min-width: ${getCssPropString('--site-min-width-wide')})`);\r\nconst siteMaxWidth       = window.matchMedia(`(max-width: ${getCssPropString('--site-max-width')})`);\r\nconst siteMaxWidthMobile = window.matchMedia(`(max-width: ${getCssPropString('--site-max-width-mobile')})`);\r\n\r\n\r\n// ************************************************************************************************\r\n// Misc. utility functions\r\n// ************************************************************************************************\r\n\r\n// Plain JS function equivalent to jQuery(selectors).eventX();\r\n// Adds event listeners of 'type' to all matching selectors \r\nfunction addEventListeners(selectors, type, listener, data = null)\r\n{\r\n  const elementList = document.querySelectorAll(selectors);\r\n  elementList.forEach(element => { element.addEventListener(type, (event) => listener(event, data)); });\r\n}\r\n\r\nfunction getCssPropString(prop)\r\n{\r\n  let string = getComputedStyle(document.documentElement).getPropertyValue(prop);\r\n\r\n  if (string.length !== 0)\r\n    string = string.replace(/'|\"/g, '').trim();\r\n  else\r\n    debug.error(`getCssPropString(${prop}): Returned CSS property string is empty`);\r\n\r\n  return string;\r\n}\r\n\r\nfunction getCssPropValue(prop)\r\n{\r\n  const string = getCssPropString(prop);\r\n  let value    = NaN;\r\n\r\n  if (string.length !== 0)\r\n    value = parseInt(string);\r\n\r\n  if (isNaN(value))\r\n    debug.error(`getCssPropValue(${prop}): Returned CSS property value is NaN`);\r\n\r\n  return value;\r\n}\r\n\r\n// Match against live CSS media queries defined in style.css\r\nfunction matchesMedia(matchMedia)\r\n{\r\n  switch (matchMedia)\r\n  {\r\n    case MATCH.SITE_MIN_WIDTH_WIDE:\r\n      return siteMinWidthWide.matches;\r\n      \r\n    case MATCH.SITE_MAX_WIDTH:\r\n      return siteMaxWidth.matches;\r\n\r\n    case MATCH.SITE_MAX_WIDTH_MOBILE:\r\n      return siteMaxWidthMobile.matches;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction replaceClass(element, removeClass, addClass)\r\n{\r\n  element.classList.remove(removeClass);\r\n  element.classList.add(addClass);\r\n}\r\n\r\nfunction disablePageScrolling(disable)\r\n{\r\n  const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\r\n  document.body.style.overflow     = disable ? 'hidden' : '';\r\n  document.body.style.paddingRight = disable ? `${scrollbarWidth}px` : '';\r\n  document.getElementById('site-header').style.paddingRight = disable ? `${scrollbarWidth}px` : '';\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Modal dialog UI module\r\n// ************************************************************************************************\r\n\r\nconst modal = (() =>\r\n{\r\n  const config = { id: 'modal' };\r\n\r\n  const template = `\r\n    <div id=\"${config.id}-dialog\" tabindex=\"-1\">\r\n      <div class=\"${config.id}-container\">\r\n        <div class=\"${config.id}-header\">\r\n          <div class=\"${config.id}-title\"></div>\r\n          <div class=\"${config.id}-close-button\"><span class=\"material-icons\" title=\"Dismiss\">close</span></div>\r\n        </div>\r\n        <div class=\"${config.id}-body\"></div>\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n  const elements = { overlay: null, container: null, body: null };\r\n  let singleChoiceClickCallback = null;\r\n  \r\n  return {\r\n    show,\r\n  };\r\n\r\n  function show(title, singleChoiceList, singleChoiceClickCallbackFunc)\r\n  {\r\n    debug.log(`modal.show(): ${title}`);\r\n\r\n    init();\r\n    \r\n    singleChoiceClickCallback = singleChoiceClickCallbackFunc;\r\n    setSingleChoiceList(singleChoiceList);\r\n\r\n    elements.container.querySelector(`.${config.id}-title`).innerHTML = title;\r\n    elements.overlay.classList.add('show');\r\n    elements.overlay.addEventListener('keydown', keyDown);\r\n    elements.overlay.focus();\r\n    disablePageScrolling(true);\r\n  }\r\n\r\n  function init()\r\n  {\r\n    if (elements.container === null)\r\n    {\r\n      document.body.insertAdjacentHTML('beforeend', template);\r\n      \r\n      elements.overlay   = document.getElementById(`${config.id}-dialog`);\r\n      elements.container = elements.overlay.querySelector(`.${config.id}-container`);\r\n      elements.body      = elements.overlay.querySelector(`.${config.id}-body`);\r\n\r\n      elements.overlay.addEventListener('click', (event) =>\r\n      {\r\n        if (event.target === elements.overlay)\r\n          close();\r\n      });\r\n\r\n      elements.overlay.addEventListener('animationend', () =>\r\n      {\r\n        if (elements.overlay.classList.contains('hide'))\r\n        {\r\n          elements.overlay.className = '';\r\n          disablePageScrolling(false);\r\n        }\r\n      });\r\n\r\n      elements.overlay.querySelector(`.${config.id}-close-button`).addEventListener('click', close);\r\n    }\r\n  }\r\n\r\n  function setSingleChoiceList(singleChoiceList)\r\n  {\r\n    let listHtml = '';\r\n\r\n    singleChoiceList.forEach(entry => listHtml += `<div id=\"${entry.id}\" class=\"${config.id}-single-choice\">${entry.description}</div>`);\r\n    elements.body.innerHTML = listHtml;\r\n\r\n    singleChoiceList.forEach(entry => elements.body.querySelector(`#${entry.id}`).addEventListener('click', singleChoiceListClick));\r\n  }\r\n\r\n  function singleChoiceListClick()\r\n  {\r\n    close();\r\n    setTimeout(() => singleChoiceClickCallback(this.id), 150);\r\n  }\r\n\r\n  function keyDown(event)\r\n  {\r\n    event.stopPropagation();\r\n\r\n    if (event.key === 'Escape')\r\n      close();\r\n  }\r\n\r\n  function close()\r\n  {\r\n    elements.overlay.removeEventListener('keydown', keyDown);\r\n    elements.overlay.classList.replace('show', 'hide');\r\n  }\r\n})();\r\n\r\n\r\n// ************************************************************************************************\r\n// Snackbar UI module\r\n// ************************************************************************************************\r\n\r\nconst snackbar = (() =>\r\n{\r\n  const config = { id: 'snackbar' };\r\n\r\n  const template = `\r\n    <div id=\"${config.id}\">\r\n      <div class=\"${config.id}-container\">\r\n        <div class=\"${config.id}-message\"></div>\r\n        <div class=\"${config.id}-action-button\"></div>\r\n        <div class=\"${config.id}-close-button\"><span class=\"material-icons\" title=\"Dismiss\">close</span></div>\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n  const elements = { snackbar: null, actionButton: null, closeButton: null };\r\n  let actionClickCallback = null;\r\n  let afterCloseCallback  = null;\r\n  let visibleTimeoutId    = -1;\r\n  let fadeTimeoutId       = -1;\r\n  \r\n  return {\r\n    show,\r\n  };\r\n  \r\n  function show(message, timeout = 5, actionText = null, actionClickCallbackFunc = null, afterCloseCallbackFunc = null)\r\n  {\r\n    debug.log(`snackbar.show(): ${message} (${timeout} sec)`);\r\n  \r\n    init();\r\n    reset();\r\n\r\n    elements.snackbar.querySelector(`.${config.id}-message`).innerHTML = message;\r\n    elements.snackbar.classList.add('show');\r\n    elements.actionButton.style.display = 'none';\r\n    afterCloseCallback = afterCloseCallbackFunc;\r\n\r\n    if ((actionText !== null) && (actionClickCallbackFunc !== null))\r\n    {\r\n      actionClickCallback = actionClickCallbackFunc;\r\n      elements.actionButton.style.display = 'block';\r\n      elements.actionButton.textContent   = actionText;\r\n      elements.actionButton.addEventListener('click', actionButtonClick);\r\n    }\r\n    else\r\n    {\r\n      // Fix edge case when actionButton is hidden...\r\n      matchesMedia(MATCH.SITE_MAX_WIDTH_MOBILE) ? elements.closeButton.style.paddingLeft = '10px' : elements.closeButton.style.paddingLeft = '20px';\r\n    }\r\n    \r\n    if (timeout !== 0)\r\n    {\r\n      visibleTimeoutId = setTimeout(() =>\r\n      {\r\n        elements.snackbar.classList.add('hide');\r\n        \r\n        fadeTimeoutId = setTimeout(() =>\r\n        {\r\n          elements.snackbar.className = '';\r\n\r\n          if (afterCloseCallback !== null)\r\n          {\r\n            afterCloseCallback();\r\n          }\r\n        }, 450);\r\n      },\r\n      (timeout * 1000));\r\n    }\r\n  }\r\n\r\n  function actionButtonClick()\r\n  {\r\n    actionClickCallback();\r\n    reset(true);\r\n  }\r\n\r\n  function init()\r\n  {\r\n    if (elements.snackbar === null)\r\n    {\r\n      document.body.insertAdjacentHTML('beforeend', template);\r\n\r\n      elements.snackbar     = document.getElementById(config.id);\r\n      elements.actionButton = elements.snackbar.querySelector(`.${config.id}-action-button`);\r\n      elements.closeButton  = elements.snackbar.querySelector(`.${config.id}-close-button`);\r\n      \r\n      elements.closeButton.addEventListener('click', () =>\r\n      {\r\n        if (afterCloseCallback !== null)\r\n          afterCloseCallback();\r\n          \r\n        reset(true);\r\n      });\r\n    }\r\n  }\r\n  \r\n  function reset(hideSnackbar = false)\r\n  {\r\n    if (visibleTimeoutId !== -1)\r\n    {\r\n      clearTimeout(visibleTimeoutId);\r\n      visibleTimeoutId = -1;\r\n    }\r\n  \r\n    if (fadeTimeoutId !== -1)\r\n    {\r\n      clearTimeout(fadeTimeoutId);\r\n      fadeTimeoutId = -1;\r\n    }\r\n\r\n    elements.actionButton.removeEventListener('click', actionButtonClick);\r\n  \r\n    if (hideSnackbar)\r\n      elements.snackbar.classList.remove('show');\r\n  }\r\n})();\r\n\r\n", "//\r\n// Common utility functions\r\n//\r\n// https://ultrafunk.com\r\n//\r\n\r\n\r\nimport * as debugLogger from '../common/debuglogger.js';\r\n\r\n\r\nexport {\r\n//Constants\r\n  MATCH,\r\n//Functions\r\n  addEventListeners,\r\n  getCssPropString,\r\n  getCssPropValue,\r\n  matchesMedia,\r\n  replaceClass,\r\n  modal,\r\n  snackbar,\r\n};\r\n\r\n\r\n/*************************************************************************************************/\r\n\r\n\r\nconst debug = debugLogger.getInstance('utils');\r\n\r\nconst MATCH = {\r\n  SITE_MIN_WIDTH_WIDE:   1,\r\n  SITE_MAX_WIDTH:        2,\r\n  SITE_MAX_WIDTH_MOBILE: 3,\r\n};\r\n\r\nconst siteMinWidthWide   = window.matchMedia(`(min-width: ${getCssPropString('--site-min-width-wide')})`);\r\nconst siteMaxWidth       = window.matchMedia(`(max-width: ${getCssPropString('--site-max-width')})`);\r\nconst siteMaxWidthMobile = window.matchMedia(`(max-width: ${getCssPropString('--site-max-width-mobile')})`);\r\n\r\n\r\n// ************************************************************************************************\r\n// Misc. utility functions\r\n// ************************************************************************************************\r\n\r\n// Plain JS function equivalent to jQuery(selectors).eventX();\r\n// Adds event listeners of 'type' to all matching selectors \r\nfunction addEventListeners(selectors, type, listener, data = null)\r\n{\r\n  const elementList = document.querySelectorAll(selectors);\r\n  elementList.forEach(element => { element.addEventListener(type, (event) => listener(event, data)); });\r\n}\r\n\r\nfunction getCssPropString(prop)\r\n{\r\n  let string = getComputedStyle(document.documentElement).getPropertyValue(prop);\r\n\r\n  if (string.length !== 0)\r\n    string = string.replace(/'|\"/g, '').trim();\r\n  else\r\n    debug.error(`getCssPropString(${prop}): Returned CSS property string is empty`);\r\n\r\n  return string;\r\n}\r\n\r\nfunction getCssPropValue(prop)\r\n{\r\n  const string = getCssPropString(prop);\r\n  let value    = NaN;\r\n\r\n  if (string.length !== 0)\r\n    value = parseInt(string);\r\n\r\n  if (isNaN(value))\r\n    debug.error(`getCssPropValue(${prop}): Returned CSS property value is NaN`);\r\n\r\n  return value;\r\n}\r\n\r\n// Match against live CSS media queries defined in style.css\r\nfunction matchesMedia(matchMedia)\r\n{\r\n  switch (matchMedia)\r\n  {\r\n    case MATCH.SITE_MIN_WIDTH_WIDE:\r\n      return siteMinWidthWide.matches;\r\n      \r\n    case MATCH.SITE_MAX_WIDTH:\r\n      return siteMaxWidth.matches;\r\n\r\n    case MATCH.SITE_MAX_WIDTH_MOBILE:\r\n      return siteMaxWidthMobile.matches;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction replaceClass(element, removeClass, addClass)\r\n{\r\n  element.classList.remove(removeClass);\r\n  element.classList.add(addClass);\r\n}\r\n\r\nfunction disablePageScrolling(disable)\r\n{\r\n  const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\r\n  document.body.style.overflow     = disable ? 'hidden' : '';\r\n  document.body.style.paddingRight = disable ? `${scrollbarWidth}px` : '';\r\n  document.getElementById('site-header').style.paddingRight = disable ? `${scrollbarWidth}px` : '';\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Modal dialog UI module\r\n// ************************************************************************************************\r\n\r\nconst modal = (() =>\r\n{\r\n  const config = { id: 'modal' };\r\n\r\n  const template = `\r\n    <div id=\"${config.id}-dialog\" tabindex=\"-1\">\r\n      <div class=\"${config.id}-container\">\r\n        <div class=\"${config.id}-header\">\r\n          <div class=\"${config.id}-title\"></div>\r\n          <div class=\"${config.id}-close-button\"><span class=\"material-icons\" title=\"Dismiss\">close</span></div>\r\n        </div>\r\n        <div class=\"${config.id}-body\"></div>\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n  const elements = { overlay: null, container: null, body: null };\r\n  let singleChoiceClickCallback = null;\r\n  \r\n  return {\r\n    show,\r\n  };\r\n\r\n  function show(title, singleChoiceList, singleChoiceClickCallbackFunc)\r\n  {\r\n    debug.log(`modal.show(): ${title}`);\r\n\r\n    init();\r\n    \r\n    singleChoiceClickCallback = singleChoiceClickCallbackFunc;\r\n    setSingleChoiceList(singleChoiceList);\r\n\r\n    elements.container.querySelector(`.${config.id}-title`).innerHTML = title;\r\n    elements.overlay.classList.add('show');\r\n    elements.overlay.addEventListener('keydown', keyDown);\r\n    elements.overlay.focus();\r\n    disablePageScrolling(true);\r\n  }\r\n\r\n  function init()\r\n  {\r\n    if (elements.container === null)\r\n    {\r\n      document.body.insertAdjacentHTML('beforeend', template);\r\n      \r\n      elements.overlay   = document.getElementById(`${config.id}-dialog`);\r\n      elements.container = elements.overlay.querySelector(`.${config.id}-container`);\r\n      elements.body      = elements.overlay.querySelector(`.${config.id}-body`);\r\n\r\n      elements.overlay.addEventListener('click', (event) =>\r\n      {\r\n        if (event.target === elements.overlay)\r\n          close();\r\n      });\r\n\r\n      elements.overlay.addEventListener('animationend', () =>\r\n      {\r\n        if (elements.overlay.classList.contains('hide'))\r\n        {\r\n          elements.overlay.className = '';\r\n          disablePageScrolling(false);\r\n        }\r\n      });\r\n\r\n      elements.overlay.querySelector(`.${config.id}-close-button`).addEventListener('click', close);\r\n    }\r\n  }\r\n\r\n  function setSingleChoiceList(singleChoiceList)\r\n  {\r\n    let listHtml = '';\r\n\r\n    singleChoiceList.forEach(entry => listHtml += `<div id=\"${entry.id}\" class=\"${config.id}-single-choice\">${entry.description}</div>`);\r\n    elements.body.innerHTML = listHtml;\r\n\r\n    singleChoiceList.forEach(entry => elements.body.querySelector(`#${entry.id}`).addEventListener('click', singleChoiceListClick));\r\n  }\r\n\r\n  function singleChoiceListClick()\r\n  {\r\n    close();\r\n    setTimeout(() => singleChoiceClickCallback(this.id), 150);\r\n  }\r\n\r\n  function keyDown(event)\r\n  {\r\n    event.stopPropagation();\r\n\r\n    if (event.key === 'Escape')\r\n      close();\r\n  }\r\n\r\n  function close()\r\n  {\r\n    elements.overlay.removeEventListener('keydown', keyDown);\r\n    elements.overlay.classList.replace('show', 'hide');\r\n  }\r\n})();\r\n\r\n\r\n// ************************************************************************************************\r\n// Snackbar UI module\r\n// ************************************************************************************************\r\n\r\nconst snackbar = (() =>\r\n{\r\n  const config = { id: 'snackbar' };\r\n\r\n  const template = `\r\n    <div id=\"${config.id}\">\r\n      <div class=\"${config.id}-container\">\r\n        <div class=\"${config.id}-message\"></div>\r\n        <div class=\"${config.id}-action-button\"></div>\r\n        <div class=\"${config.id}-close-button\"><span class=\"material-icons\" title=\"Dismiss\">close</span></div>\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n  const elements = { snackbar: null, actionButton: null, closeButton: null };\r\n  let actionClickCallback = null;\r\n  let afterCloseCallback  = null;\r\n  let visibleTimeoutId    = -1;\r\n  let fadeTimeoutId       = -1;\r\n  \r\n  return {\r\n    show,\r\n  };\r\n  \r\n  function show(message, timeout = 5, actionText = null, actionClickCallbackFunc = null, afterCloseCallbackFunc = null)\r\n  {\r\n    debug.log(`snackbar.show(): ${message} (${timeout} sec)`);\r\n  \r\n    init();\r\n    reset();\r\n\r\n    elements.snackbar.querySelector(`.${config.id}-message`).innerHTML = message;\r\n    elements.snackbar.classList.add('show');\r\n    elements.actionButton.style.display = 'none';\r\n    afterCloseCallback = afterCloseCallbackFunc;\r\n\r\n    if ((actionText !== null) && (actionClickCallbackFunc !== null))\r\n    {\r\n      actionClickCallback = actionClickCallbackFunc;\r\n      elements.actionButton.style.display = 'block';\r\n      elements.actionButton.textContent   = actionText;\r\n      elements.actionButton.addEventListener('click', actionButtonClick);\r\n    }\r\n    else\r\n    {\r\n      // Fix edge case when actionButton is hidden...\r\n      matchesMedia(MATCH.SITE_MAX_WIDTH_MOBILE) ? elements.closeButton.style.paddingLeft = '10px' : elements.closeButton.style.paddingLeft = '20px';\r\n    }\r\n    \r\n    if (timeout !== 0)\r\n    {\r\n      visibleTimeoutId = setTimeout(() =>\r\n      {\r\n        elements.snackbar.classList.add('hide');\r\n        \r\n        fadeTimeoutId = setTimeout(() =>\r\n        {\r\n          elements.snackbar.className = '';\r\n\r\n          if (afterCloseCallback !== null)\r\n          {\r\n            afterCloseCallback();\r\n          }\r\n        }, 450);\r\n      },\r\n      (timeout * 1000));\r\n    }\r\n  }\r\n\r\n  function actionButtonClick()\r\n  {\r\n    actionClickCallback();\r\n    reset(true);\r\n  }\r\n\r\n  function init()\r\n  {\r\n    if (elements.snackbar === null)\r\n    {\r\n      document.body.insertAdjacentHTML('beforeend', template);\r\n\r\n      elements.snackbar     = document.getElementById(config.id);\r\n      elements.actionButton = elements.snackbar.querySelector(`.${config.id}-action-button`);\r\n      elements.closeButton  = elements.snackbar.querySelector(`.${config.id}-close-button`);\r\n      \r\n      elements.closeButton.addEventListener('click', () =>\r\n      {\r\n        if (afterCloseCallback !== null)\r\n          afterCloseCallback();\r\n          \r\n        reset(true);\r\n      });\r\n    }\r\n  }\r\n  \r\n  function reset(hideSnackbar = false)\r\n  {\r\n    if (visibleTimeoutId !== -1)\r\n    {\r\n      clearTimeout(visibleTimeoutId);\r\n      visibleTimeoutId = -1;\r\n    }\r\n  \r\n    if (fadeTimeoutId !== -1)\r\n    {\r\n      clearTimeout(fadeTimeoutId);\r\n      fadeTimeoutId = -1;\r\n    }\r\n\r\n    elements.actionButton.removeEventListener('click', actionButtonClick);\r\n  \r\n    if (hideSnackbar)\r\n      elements.snackbar.classList.remove('show');\r\n  }\r\n})();\r\n\r\n", "//\r\n// Set and get storage values\r\n// Read, write and parse storage JSON data\r\n//\r\n// https://ultrafunk.com\r\n//\r\n\r\n\r\nimport * as debugLogger from '../common/debuglogger.js';\r\n\r\n\r\nexport {\r\n//Constants\r\n  KEY,\r\n//Functions\r\n  isAvailable,\r\n  setCookie,\r\n  deleteCookie,\r\n  getValue,\r\n  setValue,\r\n  readJson,\r\n  writeJson,\r\n  readWriteSettingsProxy,\r\n  addSettingsObserver,\r\n  parseEventData,\r\n};\r\n\r\n\r\n/*************************************************************************************************/\r\n\r\n\r\nconst debug     = debugLogger.getInstance('storage');\r\nconst observers = [];\r\n\r\nconst KEY = {\r\n  UF_PLAYBACK_SETTINGS: 'UF_PLAYBACK_SETTINGS',\r\n  UF_SITE_SETTINGS:     'UF_SITE_SETTINGS',\r\n  UF_SITE_THEME:        'UF_SITE_THEME',\r\n  UF_TRACK_LAYOUT:      'UF_TRACK_LAYOUT',\r\n  UF_TRACKS_PER_PAGE:   'UF_TRACKS_PER_PAGE',\r\n};\r\n\r\n\r\n// ************************************************************************************************\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\r\n// ************************************************************************************************\r\n\r\nfunction isAvailable(storageType)\r\n{\r\n  let storage;\r\n\r\n  try\r\n  {\r\n    storage = window[storageType];\r\n    const test = '__storage_test__';\r\n    storage.setItem(test, test);\r\n    storage.removeItem(test);\r\n    return true;\r\n  }\r\n  catch(exception)\r\n  {\r\n    return exception instanceof DOMException && (\r\n      // everything except Firefox\r\n      exception.code === 22 ||\r\n      // Firefox\r\n      exception.code === 1014 ||\r\n      // test name field too, because code might not be present\r\n      // everything except Firefox\r\n      exception.name === 'QuotaExceededError' ||\r\n      // Firefox\r\n      exception.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n      // acknowledge QuotaExceededError only if there's something already stored\r\n      (storage && storage.length !== 0);\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Set and delete cookie key => value pairs\r\n// ************************************************************************************************\r\n\r\nfunction setCookie(keyName, keyValue = '', maxAge = (60 * 60 * 24 * 365), path = '/')\r\n{\r\n  document.cookie = `${keyName}=${keyValue}; Max-Age=${maxAge}; Path=${path}; Secure; SameSite=Strict`;\r\n}\r\n\r\nfunction deleteCookie(keyName, path = '/')\r\n{\r\n  document.cookie = `${keyName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=${path}`;\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// get / set local storage key => value pairs\r\n// ************************************************************************************************\r\n\r\nfunction getValue(keyName, defaultValue = null, setDefault = true)\r\n{\r\n  const keyValue = localStorage.getItem(keyName);\r\n\r\n  if (keyValue === null)\r\n  {\r\n    if (setDefault && (defaultValue !== null))\r\n      setValue(keyName, defaultValue);\r\n    \r\n    return defaultValue;\r\n  }\r\n  \r\n  return keyValue;\r\n}\r\n\r\nfunction setValue(keyName, keyValue)\r\n{\r\n  try\r\n  {\r\n    localStorage.setItem(keyName, keyValue);\r\n  }\r\n  catch(exception)\r\n  {\r\n    debug.error(exception);\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Read (parse) and write (stringify) JSON data from local storage\r\n// ************************************************************************************************\r\n\r\nfunction readJson(keyName, defaultValue = null, setDefault = true)\r\n{\r\n  debug.log(`readJson(): ${keyName} - ${defaultValue} - ${setDefault}`);\r\n  \r\n  const keyValue     = localStorage.getItem(keyName);\r\n  let parsedKeyValue = null;\r\n\r\n  if (keyValue === null)\r\n  {\r\n    if (setDefault && (defaultValue !== null))\r\n      writeJson(keyName, defaultValue);\r\n\r\n    return defaultValue;\r\n  }\r\n  else\r\n  {\r\n    try\r\n    {\r\n      parsedKeyValue = JSON.parse(keyValue);\r\n    }\r\n    catch(exception)\r\n    {\r\n      debug.error(exception);\r\n    }\r\n  }\r\n\r\n  return parsedKeyValue;\r\n}\r\n\r\nfunction writeJson(keyName, keyData)\r\n{\r\n  debug.log(`writeJson(): ${keyName} - ${keyData}`);\r\n\r\n  try\r\n  {\r\n    localStorage.setItem(keyName, JSON.stringify(keyData));\r\n  }\r\n  catch(exception)\r\n  {\r\n    debug.error(exception);\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Merge and cleanup settings objects on new version\r\n// ************************************************************************************************\r\n\r\nfunction mergeObjectProps(oldObject, newObject, keyName)\r\n{\r\n  debug.log(`mergeObjectProps(): Merging ${keyName} from version ${oldObject.version} to version ${newObject.version}`);\r\n\r\n  const mergedObject = { ...oldObject,      ...newObject      };\r\n  mergedObject.user  = { ...newObject.user, ...oldObject.user };\r\n  mergedObject.priv  = { ...newObject.priv, ...oldObject.priv };\r\n\r\n  if (keyName === KEY.UF_SITE_SETTINGS)\r\n  {\r\n    mergedObject.priv.banners = { ...newObject.priv.banners, ...oldObject.priv.banners };\r\n  }\r\n  else if (keyName === KEY.UF_PLAYBACK_SETTINGS)\r\n  {\r\n    // Handle playback settings only properties here\r\n  }\r\n  \r\n  return mergedObject;\r\n}\r\n\r\nfunction deleteOrphanedKeys(oldObject, newObject)\r\n{\r\n  Object.keys(oldObject).forEach((key) => \r\n  {\r\n    if ((key in newObject) === false)\r\n    {\r\n      debug.log(`deleteOrphanedKeys(): Deleting '${key}'`);\r\n      delete oldObject[key];\r\n    }\r\n  });\r\n}\r\n\r\nfunction removeOrphanedObjectProps(oldObject, newObject, keyName)\r\n{\r\n  deleteOrphanedKeys(oldObject,      newObject);\r\n  deleteOrphanedKeys(oldObject.user, newObject.user);\r\n  deleteOrphanedKeys(oldObject.priv, newObject.priv);\r\n\r\n  if (keyName === KEY.UF_SITE_SETTINGS)\r\n  {\r\n    deleteOrphanedKeys(oldObject.priv.banners, newObject.priv.banners);\r\n  }\r\n  else if (keyName === KEY.UF_PLAYBACK_SETTINGS)\r\n  {\r\n    // Handle playback settings only keys / properties here\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Read and write settings proxy\r\n// ************************************************************************************************\r\n\r\nfunction readWriteSettingsProxy(settingsKey, defaultSettings = null, setDefault = true)\r\n{\r\n  const parsedJson = readJson(settingsKey, defaultSettings, setDefault);\r\n\r\n  if ((parsedJson !== null) && (defaultSettings !== null))\r\n  {\r\n    let settingsObject = null;\r\n    \r\n    // If version is new, perform object merge and cleanup\r\n    if (parsedJson.version < defaultSettings.version)\r\n    {\r\n      debug.log(parsedJson);\r\n      settingsObject = mergeObjectProps(parsedJson, defaultSettings, settingsKey);\r\n      removeOrphanedObjectProps(settingsObject, defaultSettings, settingsKey);\r\n      debug.log(settingsObject);\r\n\r\n      writeJson(settingsKey, settingsObject);\r\n    }\r\n    else\r\n    {\r\n      settingsObject = parsedJson;\r\n    }\r\n\r\n    return onSettingsChange(settingsKey, settingsObject);\r\n  }\r\n\r\n  debug.error(`readWriteSettingsProxy() failed for: ${settingsKey}`);\r\n\r\n  return null;\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Proxy traps (handlers) for settings get and set\r\n// ************************************************************************************************\r\n\r\nconst onSettingsChange = (settingsKey, settingsObject) =>\r\n{ \r\n  const handler =\r\n  {\r\n    get(target, property, receiver)\r\n    {\r\n    //debug.log(`onSettingsChange(): Get property: ${property}`);\r\n      \r\n      if (property in target)\r\n      {      \r\n        const value = Reflect.get(target, property, receiver);\r\n        \r\n        if (typeof value === 'object')\r\n          return new Proxy(value, handler);\r\n\r\n        return value;\r\n      }\r\n\r\n      debug.error(`onSettingsChange(): Get unknown property: ${property}`);\r\n    },\r\n    \r\n    set(target, property, newValue, receiver)\r\n    {\r\n    //debug.log(`onSettingsChange(): Set property: ${property}`);\r\n\r\n      if (property in target)\r\n      {\r\n        const oldValue = Reflect.get(target, property, receiver);\r\n\r\n        // Only update and write data if it has changed\r\n        if (newValue !== oldValue)\r\n        {\r\n          Reflect.set(target, property, newValue);\r\n          writeJson(settingsKey, settingsObject);\r\n          callSettingsObservers(property, oldValue, newValue);\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      debug.error(`onSettingsChange(): Set unknown property: ${property}`);\r\n      return true;\r\n    },\r\n  };\r\n\r\n  return new Proxy(settingsObject, handler);\r\n};\r\n\r\n\r\n// ************************************************************************************************\r\n// Add and call settings observers on changes\r\n// ************************************************************************************************\r\n\r\nfunction addSettingsObserver(property, observer)\r\n{\r\n  debug.log(`addSettingsObserver() for property: ${property}`);\r\n  observers.push({ property: property, observer: observer });\r\n}\r\n\r\nfunction callSettingsObservers(property, oldValue, newValue)\r\n{\r\n  observers.forEach(entry =>\r\n  {\r\n    if (entry.property === property)\r\n    {\r\n      debug.log(`callSettingsObserver() for property: ${property} - oldValue: ${oldValue} - newValue: ${newValue}`);\r\n      entry.observer(oldValue, newValue);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Helper for windowEventStorage\r\n// ************************************************************************************************\r\n\r\nfunction parseEventData(event, keyName)\r\n{\r\n  let oldData = null;\r\n\r\n  if (event.key === keyName)\r\n  {\r\n    try \r\n    {\r\n      oldData = JSON.parse(event.oldValue);\r\n    }\r\n    catch(exception)\r\n    {\r\n      debug.error(exception);\r\n    }\r\n  }\r\n\r\n  return oldData;\r\n}\r\n\r\n", "//\r\n// Set and get storage values\r\n// Read, write and parse storage JSON data\r\n//\r\n// https://ultrafunk.com\r\n//\r\n\r\n\r\nimport * as debugLogger from '../common/debuglogger.js';\r\n\r\n\r\nexport {\r\n//Constants\r\n  KEY,\r\n//Functions\r\n  isAvailable,\r\n  setCookie,\r\n  deleteCookie,\r\n  getValue,\r\n  setValue,\r\n  readJson,\r\n  writeJson,\r\n  readWriteSettingsProxy,\r\n  addSettingsObserver,\r\n  parseEventData,\r\n};\r\n\r\n\r\n/*************************************************************************************************/\r\n\r\n\r\nconst debug     = debugLogger.getInstance('storage');\r\nconst observers = [];\r\n\r\nconst KEY = {\r\n  UF_PLAYBACK_SETTINGS: 'UF_PLAYBACK_SETTINGS',\r\n  UF_SITE_SETTINGS:     'UF_SITE_SETTINGS',\r\n  UF_SITE_THEME:        'UF_SITE_THEME',\r\n  UF_TRACK_LAYOUT:      'UF_TRACK_LAYOUT',\r\n  UF_TRACKS_PER_PAGE:   'UF_TRACKS_PER_PAGE',\r\n};\r\n\r\n\r\n// ************************************************************************************************\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\r\n// ************************************************************************************************\r\n\r\nfunction isAvailable(storageType)\r\n{\r\n  let storage;\r\n\r\n  try\r\n  {\r\n    storage = window[storageType];\r\n    const test = '__storage_test__';\r\n    storage.setItem(test, test);\r\n    storage.removeItem(test);\r\n    return true;\r\n  }\r\n  catch(exception)\r\n  {\r\n    return exception instanceof DOMException && (\r\n      // everything except Firefox\r\n      exception.code === 22 ||\r\n      // Firefox\r\n      exception.code === 1014 ||\r\n      // test name field too, because code might not be present\r\n      // everything except Firefox\r\n      exception.name === 'QuotaExceededError' ||\r\n      // Firefox\r\n      exception.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n      // acknowledge QuotaExceededError only if there's something already stored\r\n      (storage && storage.length !== 0);\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Set and delete cookie key => value pairs\r\n// ************************************************************************************************\r\n\r\nfunction setCookie(keyName, keyValue = '', maxAge = (60 * 60 * 24 * 365), path = '/')\r\n{\r\n  document.cookie = `${keyName}=${keyValue}; Max-Age=${maxAge}; Path=${path}; Secure; SameSite=Strict`;\r\n}\r\n\r\nfunction deleteCookie(keyName, path = '/')\r\n{\r\n  document.cookie = `${keyName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=${path}`;\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// get / set local storage key => value pairs\r\n// ************************************************************************************************\r\n\r\nfunction getValue(keyName, defaultValue = null, setDefault = true)\r\n{\r\n  const keyValue = localStorage.getItem(keyName);\r\n\r\n  if (keyValue === null)\r\n  {\r\n    if (setDefault && (defaultValue !== null))\r\n      setValue(keyName, defaultValue);\r\n    \r\n    return defaultValue;\r\n  }\r\n  \r\n  return keyValue;\r\n}\r\n\r\nfunction setValue(keyName, keyValue)\r\n{\r\n  try\r\n  {\r\n    localStorage.setItem(keyName, keyValue);\r\n  }\r\n  catch(exception)\r\n  {\r\n    debug.error(exception);\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Read (parse) and write (stringify) JSON data from local storage\r\n// ************************************************************************************************\r\n\r\nfunction readJson(keyName, defaultValue = null, setDefault = true)\r\n{\r\n  debug.log(`readJson(): ${keyName} - ${defaultValue} - ${setDefault}`);\r\n  \r\n  const keyValue     = localStorage.getItem(keyName);\r\n  let parsedKeyValue = null;\r\n\r\n  if (keyValue === null)\r\n  {\r\n    if (setDefault && (defaultValue !== null))\r\n      writeJson(keyName, defaultValue);\r\n\r\n    return defaultValue;\r\n  }\r\n  else\r\n  {\r\n    try\r\n    {\r\n      parsedKeyValue = JSON.parse(keyValue);\r\n    }\r\n    catch(exception)\r\n    {\r\n      debug.error(exception);\r\n    }\r\n  }\r\n\r\n  return parsedKeyValue;\r\n}\r\n\r\nfunction writeJson(keyName, keyData)\r\n{\r\n  debug.log(`writeJson(): ${keyName} - ${keyData}`);\r\n\r\n  try\r\n  {\r\n    localStorage.setItem(keyName, JSON.stringify(keyData));\r\n  }\r\n  catch(exception)\r\n  {\r\n    debug.error(exception);\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Merge and cleanup settings objects on new version\r\n// ************************************************************************************************\r\n\r\nfunction mergeObjectProps(oldObject, newObject, keyName)\r\n{\r\n  debug.log(`mergeObjectProps(): Merging ${keyName} from version ${oldObject.version} to version ${newObject.version}`);\r\n\r\n  const mergedObject = { ...oldObject,      ...newObject      };\r\n  mergedObject.user  = { ...newObject.user, ...oldObject.user };\r\n  mergedObject.priv  = { ...newObject.priv, ...oldObject.priv };\r\n\r\n  if (keyName === KEY.UF_SITE_SETTINGS)\r\n  {\r\n    mergedObject.priv.banners = { ...newObject.priv.banners, ...oldObject.priv.banners };\r\n  }\r\n  else if (keyName === KEY.UF_PLAYBACK_SETTINGS)\r\n  {\r\n    // Handle playback settings only properties here\r\n  }\r\n  \r\n  return mergedObject;\r\n}\r\n\r\nfunction deleteOrphanedKeys(oldObject, newObject)\r\n{\r\n  Object.keys(oldObject).forEach((key) => \r\n  {\r\n    if ((key in newObject) === false)\r\n    {\r\n      debug.log(`deleteOrphanedKeys(): Deleting '${key}'`);\r\n      delete oldObject[key];\r\n    }\r\n  });\r\n}\r\n\r\nfunction removeOrphanedObjectProps(oldObject, newObject, keyName)\r\n{\r\n  deleteOrphanedKeys(oldObject,      newObject);\r\n  deleteOrphanedKeys(oldObject.user, newObject.user);\r\n  deleteOrphanedKeys(oldObject.priv, newObject.priv);\r\n\r\n  if (keyName === KEY.UF_SITE_SETTINGS)\r\n  {\r\n    deleteOrphanedKeys(oldObject.priv.banners, newObject.priv.banners);\r\n  }\r\n  else if (keyName === KEY.UF_PLAYBACK_SETTINGS)\r\n  {\r\n    // Handle playback settings only keys / properties here\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Read and write settings proxy\r\n// ************************************************************************************************\r\n\r\nfunction readWriteSettingsProxy(settingsKey, defaultSettings = null, setDefault = true)\r\n{\r\n  const parsedJson = readJson(settingsKey, defaultSettings, setDefault);\r\n\r\n  if ((parsedJson !== null) && (defaultSettings !== null))\r\n  {\r\n    let settingsObject = null;\r\n    \r\n    // If version is new, perform object merge and cleanup\r\n    if (parsedJson.version < defaultSettings.version)\r\n    {\r\n      debug.log(parsedJson);\r\n      settingsObject = mergeObjectProps(parsedJson, defaultSettings, settingsKey);\r\n      removeOrphanedObjectProps(settingsObject, defaultSettings, settingsKey);\r\n      debug.log(settingsObject);\r\n\r\n      writeJson(settingsKey, settingsObject);\r\n    }\r\n    else\r\n    {\r\n      settingsObject = parsedJson;\r\n    }\r\n\r\n    return onSettingsChange(settingsKey, settingsObject);\r\n  }\r\n\r\n  debug.error(`readWriteSettingsProxy() failed for: ${settingsKey}`);\r\n\r\n  return null;\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Proxy traps (handlers) for settings get and set\r\n// ************************************************************************************************\r\n\r\nconst onSettingsChange = (settingsKey, settingsObject) =>\r\n{ \r\n  const handler =\r\n  {\r\n    get(target, property, receiver)\r\n    {\r\n    //debug.log(`onSettingsChange(): Get property: ${property}`);\r\n      \r\n      if (property in target)\r\n      {      \r\n        const value = Reflect.get(target, property, receiver);\r\n        \r\n        if (typeof value === 'object')\r\n          return new Proxy(value, handler);\r\n\r\n        return value;\r\n      }\r\n\r\n      debug.error(`onSettingsChange(): Get unknown property: ${property}`);\r\n    },\r\n    \r\n    set(target, property, newValue, receiver)\r\n    {\r\n    //debug.log(`onSettingsChange(): Set property: ${property}`);\r\n\r\n      if (property in target)\r\n      {\r\n        const oldValue = Reflect.get(target, property, receiver);\r\n\r\n        // Only update and write data if it has changed\r\n        if (newValue !== oldValue)\r\n        {\r\n          Reflect.set(target, property, newValue);\r\n          writeJson(settingsKey, settingsObject);\r\n          callSettingsObservers(property, oldValue, newValue);\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      debug.error(`onSettingsChange(): Set unknown property: ${property}`);\r\n      return true;\r\n    },\r\n  };\r\n\r\n  return new Proxy(settingsObject, handler);\r\n};\r\n\r\n\r\n// ************************************************************************************************\r\n// Add and call settings observers on changes\r\n// ************************************************************************************************\r\n\r\nfunction addSettingsObserver(property, observer)\r\n{\r\n  debug.log(`addSettingsObserver() for property: ${property}`);\r\n  observers.push({ property: property, observer: observer });\r\n}\r\n\r\nfunction callSettingsObservers(property, oldValue, newValue)\r\n{\r\n  observers.forEach(entry =>\r\n  {\r\n    if (entry.property === property)\r\n    {\r\n      debug.log(`callSettingsObserver() for property: ${property} - oldValue: ${oldValue} - newValue: ${newValue}`);\r\n      entry.observer(oldValue, newValue);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Helper for windowEventStorage\r\n// ************************************************************************************************\r\n\r\nfunction parseEventData(event, keyName)\r\n{\r\n  let oldData = null;\r\n\r\n  if (event.key === keyName)\r\n  {\r\n    try \r\n    {\r\n      oldData = JSON.parse(event.oldValue);\r\n    }\r\n    catch(exception)\r\n    {\r\n      debug.error(exception);\r\n    }\r\n  }\r\n\r\n  return oldData;\r\n}\r\n\r\n", "//\r\n// Set and get storage values\r\n// Read, write and parse storage JSON data\r\n//\r\n// https://ultrafunk.com\r\n//\r\n\r\n\r\nimport * as debugLogger from '../common/debuglogger.js';\r\n\r\n\r\nexport {\r\n//Constants\r\n  KEY,\r\n//Functions\r\n  isAvailable,\r\n  setCookie,\r\n  deleteCookie,\r\n  getValue,\r\n  setValue,\r\n  readJson,\r\n  writeJson,\r\n  readWriteSettingsProxy,\r\n  addSettingsObserver,\r\n  parseEventData,\r\n};\r\n\r\n\r\n/*************************************************************************************************/\r\n\r\n\r\nconst debug     = debugLogger.getInstance('storage');\r\nconst observers = [];\r\n\r\nconst KEY = {\r\n  UF_PLAYBACK_SETTINGS: 'UF_PLAYBACK_SETTINGS',\r\n  UF_SITE_SETTINGS:     'UF_SITE_SETTINGS',\r\n  UF_SITE_THEME:        'UF_SITE_THEME',\r\n  UF_TRACK_LAYOUT:      'UF_TRACK_LAYOUT',\r\n  UF_TRACKS_PER_PAGE:   'UF_TRACKS_PER_PAGE',\r\n};\r\n\r\n\r\n// ************************************************************************************************\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\r\n// ************************************************************************************************\r\n\r\nfunction isAvailable(storageType)\r\n{\r\n  let storage;\r\n\r\n  try\r\n  {\r\n    storage = window[storageType];\r\n    const test = '__storage_test__';\r\n    storage.setItem(test, test);\r\n    storage.removeItem(test);\r\n    return true;\r\n  }\r\n  catch(exception)\r\n  {\r\n    return exception instanceof DOMException && (\r\n      // everything except Firefox\r\n      exception.code === 22 ||\r\n      // Firefox\r\n      exception.code === 1014 ||\r\n      // test name field too, because code might not be present\r\n      // everything except Firefox\r\n      exception.name === 'QuotaExceededError' ||\r\n      // Firefox\r\n      exception.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n      // acknowledge QuotaExceededError only if there's something already stored\r\n      (storage && storage.length !== 0);\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Set and delete cookie key => value pairs\r\n// ************************************************************************************************\r\n\r\nfunction setCookie(keyName, keyValue = '', maxAge = (60 * 60 * 24 * 365), path = '/')\r\n{\r\n  document.cookie = `${keyName}=${keyValue}; Max-Age=${maxAge}; Path=${path}; Secure; SameSite=Strict`;\r\n}\r\n\r\nfunction deleteCookie(keyName, path = '/')\r\n{\r\n  document.cookie = `${keyName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=${path}`;\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// get / set local storage key => value pairs\r\n// ************************************************************************************************\r\n\r\nfunction getValue(keyName, defaultValue = null, setDefault = true)\r\n{\r\n  const keyValue = localStorage.getItem(keyName);\r\n\r\n  if (keyValue === null)\r\n  {\r\n    if (setDefault && (defaultValue !== null))\r\n      setValue(keyName, defaultValue);\r\n    \r\n    return defaultValue;\r\n  }\r\n  \r\n  return keyValue;\r\n}\r\n\r\nfunction setValue(keyName, keyValue)\r\n{\r\n  try\r\n  {\r\n    localStorage.setItem(keyName, keyValue);\r\n  }\r\n  catch(exception)\r\n  {\r\n    debug.error(exception);\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Read (parse) and write (stringify) JSON data from local storage\r\n// ************************************************************************************************\r\n\r\nfunction readJson(keyName, defaultValue = null, setDefault = true)\r\n{\r\n  debug.log(`readJson(): ${keyName} - ${defaultValue} - ${setDefault}`);\r\n  \r\n  const keyValue     = localStorage.getItem(keyName);\r\n  let parsedKeyValue = null;\r\n\r\n  if (keyValue === null)\r\n  {\r\n    if (setDefault && (defaultValue !== null))\r\n      writeJson(keyName, defaultValue);\r\n\r\n    return defaultValue;\r\n  }\r\n  else\r\n  {\r\n    try\r\n    {\r\n      parsedKeyValue = JSON.parse(keyValue);\r\n    }\r\n    catch(exception)\r\n    {\r\n      debug.error(exception);\r\n    }\r\n  }\r\n\r\n  return parsedKeyValue;\r\n}\r\n\r\nfunction writeJson(keyName, keyData)\r\n{\r\n  debug.log(`writeJson(): ${keyName} - ${keyData}`);\r\n\r\n  try\r\n  {\r\n    localStorage.setItem(keyName, JSON.stringify(keyData));\r\n  }\r\n  catch(exception)\r\n  {\r\n    debug.error(exception);\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Merge and cleanup settings objects on new version\r\n// ************************************************************************************************\r\n\r\nfunction mergeObjectProps(oldObject, newObject, keyName)\r\n{\r\n  debug.log(`mergeObjectProps(): Merging ${keyName} from version ${oldObject.version} to version ${newObject.version}`);\r\n\r\n  const mergedObject = { ...oldObject,      ...newObject      };\r\n  mergedObject.user  = { ...newObject.user, ...oldObject.user };\r\n  mergedObject.priv  = { ...newObject.priv, ...oldObject.priv };\r\n\r\n  if (keyName === KEY.UF_SITE_SETTINGS)\r\n  {\r\n    mergedObject.priv.banners = { ...newObject.priv.banners, ...oldObject.priv.banners };\r\n  }\r\n  else if (keyName === KEY.UF_PLAYBACK_SETTINGS)\r\n  {\r\n    // Handle playback settings only properties here\r\n  }\r\n  \r\n  return mergedObject;\r\n}\r\n\r\nfunction deleteOrphanedKeys(oldObject, newObject)\r\n{\r\n  Object.keys(oldObject).forEach((key) => \r\n  {\r\n    if ((key in newObject) === false)\r\n    {\r\n      debug.log(`deleteOrphanedKeys(): Deleting '${key}'`);\r\n      delete oldObject[key];\r\n    }\r\n  });\r\n}\r\n\r\nfunction removeOrphanedObjectProps(oldObject, newObject, keyName)\r\n{\r\n  deleteOrphanedKeys(oldObject,      newObject);\r\n  deleteOrphanedKeys(oldObject.user, newObject.user);\r\n  deleteOrphanedKeys(oldObject.priv, newObject.priv);\r\n\r\n  if (keyName === KEY.UF_SITE_SETTINGS)\r\n  {\r\n    deleteOrphanedKeys(oldObject.priv.banners, newObject.priv.banners);\r\n  }\r\n  else if (keyName === KEY.UF_PLAYBACK_SETTINGS)\r\n  {\r\n    // Handle playback settings only keys / properties here\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Read and write settings proxy\r\n// ************************************************************************************************\r\n\r\nfunction readWriteSettingsProxy(settingsKey, defaultSettings = null, setDefault = true)\r\n{\r\n  const parsedJson = readJson(settingsKey, defaultSettings, setDefault);\r\n\r\n  if ((parsedJson !== null) && (defaultSettings !== null))\r\n  {\r\n    let settingsObject = null;\r\n    \r\n    // If version is new, perform object merge and cleanup\r\n    if (parsedJson.version < defaultSettings.version)\r\n    {\r\n      debug.log(parsedJson);\r\n      settingsObject = mergeObjectProps(parsedJson, defaultSettings, settingsKey);\r\n      removeOrphanedObjectProps(settingsObject, defaultSettings, settingsKey);\r\n      debug.log(settingsObject);\r\n\r\n      writeJson(settingsKey, settingsObject);\r\n    }\r\n    else\r\n    {\r\n      settingsObject = parsedJson;\r\n    }\r\n\r\n    return onSettingsChange(settingsKey, settingsObject);\r\n  }\r\n\r\n  debug.error(`readWriteSettingsProxy() failed for: ${settingsKey}`);\r\n\r\n  return null;\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Proxy traps (handlers) for settings get and set\r\n// ************************************************************************************************\r\n\r\nconst onSettingsChange = (settingsKey, settingsObject) =>\r\n{ \r\n  const handler =\r\n  {\r\n    get(target, property, receiver)\r\n    {\r\n    //debug.log(`onSettingsChange(): Get property: ${property}`);\r\n      \r\n      if (property in target)\r\n      {      \r\n        const value = Reflect.get(target, property, receiver);\r\n        \r\n        if (typeof value === 'object')\r\n          return new Proxy(value, handler);\r\n\r\n        return value;\r\n      }\r\n\r\n      debug.error(`onSettingsChange(): Get unknown property: ${property}`);\r\n    },\r\n    \r\n    set(target, property, newValue, receiver)\r\n    {\r\n    //debug.log(`onSettingsChange(): Set property: ${property}`);\r\n\r\n      if (property in target)\r\n      {\r\n        const oldValue = Reflect.get(target, property, receiver);\r\n\r\n        // Only update and write data if it has changed\r\n        if (newValue !== oldValue)\r\n        {\r\n          Reflect.set(target, property, newValue);\r\n          writeJson(settingsKey, settingsObject);\r\n          callSettingsObservers(property, oldValue, newValue);\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      debug.error(`onSettingsChange(): Set unknown property: ${property}`);\r\n      return true;\r\n    },\r\n  };\r\n\r\n  return new Proxy(settingsObject, handler);\r\n};\r\n\r\n\r\n// ************************************************************************************************\r\n// Add and call settings observers on changes\r\n// ************************************************************************************************\r\n\r\nfunction addSettingsObserver(property, observer)\r\n{\r\n  debug.log(`addSettingsObserver() for property: ${property}`);\r\n  observers.push({ property: property, observer: observer });\r\n}\r\n\r\nfunction callSettingsObservers(property, oldValue, newValue)\r\n{\r\n  observers.forEach(entry =>\r\n  {\r\n    if (entry.property === property)\r\n    {\r\n      debug.log(`callSettingsObserver() for property: ${property} - oldValue: ${oldValue} - newValue: ${newValue}`);\r\n      entry.observer(oldValue, newValue);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Helper for windowEventStorage\r\n// ************************************************************************************************\r\n\r\nfunction parseEventData(event, keyName)\r\n{\r\n  let oldData = null;\r\n\r\n  if (event.key === keyName)\r\n  {\r\n    try \r\n    {\r\n      oldData = JSON.parse(event.oldValue);\r\n    }\r\n    catch(exception)\r\n    {\r\n      debug.error(exception);\r\n    }\r\n  }\r\n\r\n  return oldData;\r\n}\r\n\r\n", "//\r\n// Set and get storage values\r\n// Read, write and parse storage JSON data\r\n//\r\n// https://ultrafunk.com\r\n//\r\n\r\n\r\nimport * as debugLogger from '../common/debuglogger.js';\r\n\r\n\r\nexport {\r\n//Constants\r\n  KEY,\r\n//Functions\r\n  isAvailable,\r\n  setCookie,\r\n  deleteCookie,\r\n  getValue,\r\n  setValue,\r\n  readJson,\r\n  writeJson,\r\n  readWriteSettingsProxy,\r\n  addSettingsObserver,\r\n  parseEventData,\r\n};\r\n\r\n\r\n/*************************************************************************************************/\r\n\r\n\r\nconst debug     = debugLogger.getInstance('storage');\r\nconst observers = [];\r\n\r\nconst KEY = {\r\n  UF_PLAYBACK_SETTINGS: 'UF_PLAYBACK_SETTINGS',\r\n  UF_SITE_SETTINGS:     'UF_SITE_SETTINGS',\r\n  UF_SITE_THEME:        'UF_SITE_THEME',\r\n  UF_TRACK_LAYOUT:      'UF_TRACK_LAYOUT',\r\n  UF_TRACKS_PER_PAGE:   'UF_TRACKS_PER_PAGE',\r\n};\r\n\r\n\r\n// ************************************************************************************************\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\r\n// ************************************************************************************************\r\n\r\nfunction isAvailable(storageType)\r\n{\r\n  let storage;\r\n\r\n  try\r\n  {\r\n    storage = window[storageType];\r\n    const test = '__storage_test__';\r\n    storage.setItem(test, test);\r\n    storage.removeItem(test);\r\n    return true;\r\n  }\r\n  catch(exception)\r\n  {\r\n    return exception instanceof DOMException && (\r\n      // everything except Firefox\r\n      exception.code === 22 ||\r\n      // Firefox\r\n      exception.code === 1014 ||\r\n      // test name field too, because code might not be present\r\n      // everything except Firefox\r\n      exception.name === 'QuotaExceededError' ||\r\n      // Firefox\r\n      exception.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n      // acknowledge QuotaExceededError only if there's something already stored\r\n      (storage && storage.length !== 0);\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Set and delete cookie key => value pairs\r\n// ************************************************************************************************\r\n\r\nfunction setCookie(keyName, keyValue = '', maxAge = (60 * 60 * 24 * 365), path = '/')\r\n{\r\n  document.cookie = `${keyName}=${keyValue}; Max-Age=${maxAge}; Path=${path}; Secure; SameSite=Strict`;\r\n}\r\n\r\nfunction deleteCookie(keyName, path = '/')\r\n{\r\n  document.cookie = `${keyName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=${path}`;\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// get / set local storage key => value pairs\r\n// ************************************************************************************************\r\n\r\nfunction getValue(keyName, defaultValue = null, setDefault = true)\r\n{\r\n  const keyValue = localStorage.getItem(keyName);\r\n\r\n  if (keyValue === null)\r\n  {\r\n    if (setDefault && (defaultValue !== null))\r\n      setValue(keyName, defaultValue);\r\n    \r\n    return defaultValue;\r\n  }\r\n  \r\n  return keyValue;\r\n}\r\n\r\nfunction setValue(keyName, keyValue)\r\n{\r\n  try\r\n  {\r\n    localStorage.setItem(keyName, keyValue);\r\n  }\r\n  catch(exception)\r\n  {\r\n    debug.error(exception);\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Read (parse) and write (stringify) JSON data from local storage\r\n// ************************************************************************************************\r\n\r\nfunction readJson(keyName, defaultValue = null, setDefault = true)\r\n{\r\n  debug.log(`readJson(): ${keyName} - ${defaultValue} - ${setDefault}`);\r\n  \r\n  const keyValue     = localStorage.getItem(keyName);\r\n  let parsedKeyValue = null;\r\n\r\n  if (keyValue === null)\r\n  {\r\n    if (setDefault && (defaultValue !== null))\r\n      writeJson(keyName, defaultValue);\r\n\r\n    return defaultValue;\r\n  }\r\n  else\r\n  {\r\n    try\r\n    {\r\n      parsedKeyValue = JSON.parse(keyValue);\r\n    }\r\n    catch(exception)\r\n    {\r\n      debug.error(exception);\r\n    }\r\n  }\r\n\r\n  return parsedKeyValue;\r\n}\r\n\r\nfunction writeJson(keyName, keyData)\r\n{\r\n  debug.log(`writeJson(): ${keyName} - ${keyData}`);\r\n\r\n  try\r\n  {\r\n    localStorage.setItem(keyName, JSON.stringify(keyData));\r\n  }\r\n  catch(exception)\r\n  {\r\n    debug.error(exception);\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Merge and cleanup settings objects on new version\r\n// ************************************************************************************************\r\n\r\nfunction mergeObjectProps(oldObject, newObject, keyName)\r\n{\r\n  debug.log(`mergeObjectProps(): Merging ${keyName} from version ${oldObject.version} to version ${newObject.version}`);\r\n\r\n  const mergedObject = { ...oldObject,      ...newObject      };\r\n  mergedObject.user  = { ...newObject.user, ...oldObject.user };\r\n  mergedObject.priv  = { ...newObject.priv, ...oldObject.priv };\r\n\r\n  if (keyName === KEY.UF_SITE_SETTINGS)\r\n  {\r\n    mergedObject.priv.banners = { ...newObject.priv.banners, ...oldObject.priv.banners };\r\n  }\r\n  else if (keyName === KEY.UF_PLAYBACK_SETTINGS)\r\n  {\r\n    // Handle playback settings only properties here\r\n  }\r\n  \r\n  return mergedObject;\r\n}\r\n\r\nfunction deleteOrphanedKeys(oldObject, newObject)\r\n{\r\n  Object.keys(oldObject).forEach((key) => \r\n  {\r\n    if ((key in newObject) === false)\r\n    {\r\n      debug.log(`deleteOrphanedKeys(): Deleting '${key}'`);\r\n      delete oldObject[key];\r\n    }\r\n  });\r\n}\r\n\r\nfunction removeOrphanedObjectProps(oldObject, newObject, keyName)\r\n{\r\n  deleteOrphanedKeys(oldObject,      newObject);\r\n  deleteOrphanedKeys(oldObject.user, newObject.user);\r\n  deleteOrphanedKeys(oldObject.priv, newObject.priv);\r\n\r\n  if (keyName === KEY.UF_SITE_SETTINGS)\r\n  {\r\n    deleteOrphanedKeys(oldObject.priv.banners, newObject.priv.banners);\r\n  }\r\n  else if (keyName === KEY.UF_PLAYBACK_SETTINGS)\r\n  {\r\n    // Handle playback settings only keys / properties here\r\n  }\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Read and write settings proxy\r\n// ************************************************************************************************\r\n\r\nfunction readWriteSettingsProxy(settingsKey, defaultSettings = null, setDefault = true)\r\n{\r\n  const parsedJson = readJson(settingsKey, defaultSettings, setDefault);\r\n\r\n  if ((parsedJson !== null) && (defaultSettings !== null))\r\n  {\r\n    let settingsObject = null;\r\n    \r\n    // If version is new, perform object merge and cleanup\r\n    if (parsedJson.version < defaultSettings.version)\r\n    {\r\n      debug.log(parsedJson);\r\n      settingsObject = mergeObjectProps(parsedJson, defaultSettings, settingsKey);\r\n      removeOrphanedObjectProps(settingsObject, defaultSettings, settingsKey);\r\n      debug.log(settingsObject);\r\n\r\n      writeJson(settingsKey, settingsObject);\r\n    }\r\n    else\r\n    {\r\n      settingsObject = parsedJson;\r\n    }\r\n\r\n    return onSettingsChange(settingsKey, settingsObject);\r\n  }\r\n\r\n  debug.error(`readWriteSettingsProxy() failed for: ${settingsKey}`);\r\n\r\n  return null;\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Proxy traps (handlers) for settings get and set\r\n// ************************************************************************************************\r\n\r\nconst onSettingsChange = (settingsKey, settingsObject) =>\r\n{ \r\n  const handler =\r\n  {\r\n    get(target, property, receiver)\r\n    {\r\n    //debug.log(`onSettingsChange(): Get property: ${property}`);\r\n      \r\n      if (property in target)\r\n      {      \r\n        const value = Reflect.get(target, property, receiver);\r\n        \r\n        if (typeof value === 'object')\r\n          return new Proxy(value, handler);\r\n\r\n        return value;\r\n      }\r\n\r\n      debug.error(`onSettingsChange(): Get unknown property: ${property}`);\r\n    },\r\n    \r\n    set(target, property, newValue, receiver)\r\n    {\r\n    //debug.log(`onSettingsChange(): Set property: ${property}`);\r\n\r\n      if (property in target)\r\n      {\r\n        const oldValue = Reflect.get(target, property, receiver);\r\n\r\n        // Only update and write data if it has changed\r\n        if (newValue !== oldValue)\r\n        {\r\n          Reflect.set(target, property, newValue);\r\n          writeJson(settingsKey, settingsObject);\r\n          callSettingsObservers(property, oldValue, newValue);\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      debug.error(`onSettingsChange(): Set unknown property: ${property}`);\r\n      return true;\r\n    },\r\n  };\r\n\r\n  return new Proxy(settingsObject, handler);\r\n};\r\n\r\n\r\n// ************************************************************************************************\r\n// Add and call settings observers on changes\r\n// ************************************************************************************************\r\n\r\nfunction addSettingsObserver(property, observer)\r\n{\r\n  debug.log(`addSettingsObserver() for property: ${property}`);\r\n  observers.push({ property: property, observer: observer });\r\n}\r\n\r\nfunction callSettingsObservers(property, oldValue, newValue)\r\n{\r\n  observers.forEach(entry =>\r\n  {\r\n    if (entry.property === property)\r\n    {\r\n      debug.log(`callSettingsObserver() for property: ${property} - oldValue: ${oldValue} - newValue: ${newValue}`);\r\n      entry.observer(oldValue, newValue);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Helper for windowEventStorage\r\n// ************************************************************************************************\r\n\r\nfunction parseEventData(event, keyName)\r\n{\r\n  let oldData = null;\r\n\r\n  if (event.key === keyName)\r\n  {\r\n    try \r\n    {\r\n      oldData = JSON.parse(event.oldValue);\r\n    }\r\n    catch(exception)\r\n    {\r\n      debug.error(exception);\r\n    }\r\n  }\r\n\r\n  return oldData;\r\n}\r\n\r\n", "//\r\n// View / change playback and site settings\r\n//\r\n// https://ultrafunk.com\r\n//\r\n\r\n\r\nimport * as debugLogger from '../common/debuglogger.js';\r\nimport * as settings    from '../common/settings.js';\r\nimport { snackbar }     from '../common/utils.js';\r\n\r\nimport {\r\n  KEY,\r\n  deleteCookie,\r\n  readJson,\r\n  writeJson,\r\n} from '../common/storage.js';\r\n\r\n\r\n/*************************************************************************************************/\r\n\r\n\r\nconst debug          = debugLogger.getInstance('settings');\r\nlet playbackSettings = null;\r\nlet siteSettings     = null;\r\n\r\nconst mConfig = {\r\n  settingsContainerId:  'settings-container',\r\n  settingsSaveResetId:  'settings-save-reset',\r\n  settingsUpdatedEvent: 'settingsUpdated',\r\n  playbackIdPrefix:     'playback', // Used to prevent HTML element ID collisions\r\n  siteIdPrefix:         'site',     // Used to prevent HTML element ID collisions\r\n};\r\n\r\nconst mElements = {\r\n  settingsContainer: null,\r\n};\r\n\r\nconst settingsErrorTemplate = `<h3>An error occurred while reading Playback and Site settings</h3>\r\n  <p>This can be caused by several issues, but most likely it happened because of corrupt or malformed JSON data in the browsers Local Storage.</p>\r\n  <p>Clearing all settings stored locally in the browser will probably fix the problem, click on the button below to do that.\r\n  <b>Note:</b> All Playback and Site settings will be reset to default values.</p>\r\n  <div class=\"settings-clear\"><b>Clear All Settings</b></div>\r\n  <p>If that does not work, another possible fix is to clear all cached data stored in the browser, the following links contain more information about how to do that for\r\n  <a href=\"https://support.google.com/accounts/answer/32050\">Chrome</a> and\r\n  <a href=\"https://support.mozilla.org/en-US/kb/clear-cookies-and-site-data-firefox\">Firefox</a>.</p>`;\r\n\r\n\r\n// ************************************************************************************************\r\n// Document load init + settings read error handling\r\n// ************************************************************************************************\r\n\r\ndocument.addEventListener('DOMContentLoaded', () =>\r\n{ \r\n  debug.log('DOMContentLoaded');\r\n\r\n  mElements.settingsContainer = document.getElementById(mConfig.settingsContainerId);\r\n\r\n  if (mElements.settingsContainer !== null)\r\n  {\r\n    // For quick access to the Clear All Settings page...\r\n    if (document.URL.includes('?clear=true'))\r\n    {\r\n      readSettingsError();\r\n      return;\r\n    }\r\n\r\n    readSettings();\r\n\r\n    if ((playbackSettings !== null) && (siteSettings !== null))\r\n    {\r\n      setCurrentValues(playbackSettings.user, settings.playbackSettingsSchema);\r\n      setCurrentValues(siteSettings.user, settings.siteSettingsSchema);\r\n  \r\n      insertSettingsHtml();\r\n      mElements.settingsContainer.style.opacity = 1;\r\n  \r\n      document.querySelector(`#${mConfig.settingsSaveResetId} .settings-save`).addEventListener('click', settingsSaveClick);\r\n      document.querySelector(`#${mConfig.settingsSaveResetId} .settings-reset`).addEventListener('click', settingsResetClick);\r\n    }\r\n    else\r\n    {\r\n      readSettingsError();\r\n    }\r\n  }\r\n  else\r\n  {\r\n    debug.error(`Unable to getElementById() for '#${mConfig.settingsContainerId}'`);\r\n  }\r\n});\r\n\r\nfunction readSettingsError()\r\n{\r\n  document.getElementById(mConfig.settingsSaveResetId).style.display = 'none';\r\n\r\n  mElements.settingsContainer.insertAdjacentHTML('afterbegin', settingsErrorTemplate);\r\n  mElements.settingsContainer.style.opacity = 1;\r\n\r\n  document.querySelector(`#${mConfig.settingsContainerId} .settings-clear`).addEventListener('click', () =>\r\n  {\r\n    localStorage.removeItem(KEY.UF_PLAYBACK_SETTINGS);\r\n    localStorage.removeItem(KEY.UF_SITE_SETTINGS);\r\n    deleteCookie(KEY.UF_TRACKS_PER_PAGE);\r\n\r\n    readSettings();\r\n\r\n    if ((playbackSettings !== null) && (siteSettings !== null))\r\n      snackbar.show('All settings have been cleared', 5, 'Reload', () => { window.location.href = '/settings/'; }, () => { window.location.href = '/settings/'; });\r\n    else\r\n      snackbar.show('Sorry, unable to clear all settings', 5);\r\n  });\r\n}\r\n\r\n// ************************************************************************************************\r\n// Read and write settings JSON data from local storage + reset settings to default\r\n// ************************************************************************************************\r\n\r\nfunction readSettings()\r\n{\r\n  playbackSettings = readJson(KEY.UF_PLAYBACK_SETTINGS, settings.playbackSettings);\r\n  siteSettings     = readJson(KEY.UF_SITE_SETTINGS, settings.siteSettings);\r\n}\r\n\r\nfunction writeSettings()\r\n{\r\n  writeJson(KEY.UF_PLAYBACK_SETTINGS, playbackSettings);\r\n  writeJson(KEY.UF_SITE_SETTINGS, siteSettings);\r\n  document.dispatchEvent(new Event(mConfig.settingsUpdatedEvent));\r\n}\r\n\r\nfunction resetSettings(settings, schema)\r\n{\r\n  Object.keys(settings).forEach(key => { if (key in schema) settings[key] = schema[key].default; });\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Set current settings values and update values on UI interaction\r\n// ************************************************************************************************\r\n\r\nfunction setCurrentValues(settings, schema)\r\n{\r\n  Object.entries(settings).forEach(([key, settingValue]) =>\r\n  {\r\n    if (key in schema)\r\n    {\r\n      schema[key].current = getValueStringsIndex(schema[key], settingValue);\r\n\r\n      if (schema[key].current === -1)\r\n        schema[key].current = getValueStringsIndex(schema[key], schema[key].default);\r\n    }\r\n  });\r\n}\r\n\r\nfunction updateSettingsValues(settings, schema, idPrefix)\r\n{\r\n  Object.keys(settings).forEach(key =>\r\n  {\r\n    if (key in schema)\r\n    {\r\n      const valueString = schema[key].valueStrings[getValueStringsIndex(schema[key], settings[key])];\r\n      document.getElementById(`${idPrefix}:${key}`).querySelector('.value-string').textContent = valueString;\r\n    }\r\n  });\r\n}\r\n\r\nfunction getValueStringsIndex(schemaEntry, findValue)\r\n{\r\n  return schemaEntry.values.findIndex(value => value === findValue);\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Create HTML content for read settings\r\n// ************************************************************************************************\r\n\r\nfunction insertSettingsHtml()\r\n{\r\n  let html = `\\n<h3>Playback</h3>\\n<table class=\"playback-settings\">\\n<tbody>`;\r\n  Object.entries(settings.playbackSettingsSchema).forEach(entry => html += addTableRow(mConfig.playbackIdPrefix, entry));\r\n\r\n  html += `\\n</tbody>\\n</table>\\n<h3>Site</h3>\\n<table class=\"site-settings\">\\n<tbody>`;\r\n  Object.entries(settings.siteSettingsSchema).forEach(entry => html += addTableRow(mConfig.siteIdPrefix, entry));\r\n\r\n  html += `\\n</tbody>\\n</table>\\n`;\r\n\r\n  mElements.settingsContainer.insertAdjacentHTML('afterbegin', html);\r\n  Object.keys(settings.playbackSettingsSchema).forEach(key => document.getElementById(`${mConfig.playbackIdPrefix}:${key}`).addEventListener('click', playbackSettingsClick));\r\n  Object.keys(settings.siteSettingsSchema).forEach(key => document.getElementById(`${mConfig.siteIdPrefix}:${key}`).addEventListener('click', siteSettingsClick));\r\n}\r\n\r\nfunction addTableRow(idPrefix, entry)\r\n{\r\n  const html =\r\n    `\\n<tr id=\"${idPrefix}:${entry[0]}\" class=\"settings-entry\">\r\n      <td class=\"description\">${entry[1].description}</td>\r\n      <td class=\"value-string\">${entry[1].valueStrings[entry[1].current]}</td>\r\n    </tr>`;\r\n\r\n  return html;\r\n}\r\n\r\n\r\n// ************************************************************************************************\r\n// Update data on UI-events (click), save and reset settings\r\n// ************************************************************************************************\r\n\r\nfunction playbackSettingsClick(event) { updateRowClicked(event, playbackSettings.user, settings.playbackSettingsSchema); }\r\nfunction siteSettingsClick(event)     { updateRowClicked(event, siteSettings.user,     settings.siteSettingsSchema);     }\r\n\r\nfunction updateRowClicked(event, settings, schema)\r\n{\r\n  const element         = event.target.parentElement;\r\n  const settingsKey     = element.id.split(':')[1];\r\n  const schemaEntry     = schema[settingsKey];\r\n  schemaEntry.current   = ((schemaEntry.current + 1) < schemaEntry.values.length) ? schemaEntry.current + 1 : schemaEntry.current = 0;\r\n  settings[settingsKey] = schemaEntry.values[schemaEntry.current];\r\n\r\n  element.querySelector('.value-string').textContent = schemaEntry.valueStrings[schemaEntry.current];\r\n}\r\n\r\nfunction settingsSaveClick()\r\n{\r\n  writeSettings();\r\n  snackbar.show('Settings saved successfully', 3);\r\n}\r\n\r\nfunction settingsResetClick()\r\n{\r\n  resetSettings(playbackSettings.user, settings.playbackSettingsSchema);\r\n  updateSettingsValues(playbackSettings.user, settings.playbackSettingsSchema, mConfig.playbackIdPrefix);\r\n\r\n  resetSettings(siteSettings.user, settings.siteSettingsSchema);\r\n  updateSettingsValues(siteSettings.user, settings.siteSettingsSchema, mConfig.siteIdPrefix);\r\n\r\n  snackbar.show('All settings reset', 5, 'Undo', () => location.reload(), () => writeSettings());\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
